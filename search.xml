<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Serial Thrillers: Bash Script for USB Identification</title>
      <link href="/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/"/>
      <url>/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/</url>
      
        <content type="html"><![CDATA[<p>If you’ve ever needed to identify USB devices connected to your Linux system, you know it can be a tedious process involving multiple commands and parsing through lengthy outputs. </p><p>Thankfully, automation can simplify this task significantly.</p><p>In this post, we’ll walk through a Bash script designed to list all USB devices connected to your system along with their serial numbers.</p><h4 id="The-Script"><a href="#The-Script" class="headerlink" title="The Script"></a>The Script</h4><p>Here’s the script in question:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sysdevpath <span class="keyword">in</span> $(find /sys/bus/usb/devices/usb*/ -name dev); <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">        syspath=<span class="string">&quot;<span class="variable">$&#123;sysdevpath%/dev&#125;</span>&quot;</span></span><br><span class="line">        devname=<span class="string">&quot;<span class="subst">$(udevadm info -q name -p $syspath)</span>&quot;</span></span><br><span class="line">        [[ <span class="string">&quot;<span class="variable">$devname</span>&quot;</span> == <span class="string">&quot;bus/&quot;</span>* ]]</span><br><span class="line">        <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(udevadm info -q property --export -p $syspath)</span>&quot;</span></span><br><span class="line">        [[ -z <span class="string">&quot;<span class="variable">$ID_SERIAL</span>&quot;</span> ]]</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/dev/<span class="variable">$devname</span> - <span class="variable">$ID_SERIAL</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="Understanding-the-Script"><a href="#Understanding-the-Script" class="headerlink" title="Understanding the Script"></a>Understanding the Script</h4><p>Let’s break down what this script does step by step:</p><ol><li><p><strong>Finding USB Devices</strong>: The script starts by finding all device paths under <code>/sys/bus/usb/devices/usb*/</code> that end with <code>dev</code>. This path contains directories and files representing USB devices and their attributes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sysdevpath <span class="keyword">in</span> $(find /sys/bus/usb/devices/usb*/ -name dev); <span class="keyword">do</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Extracting the Syspath</strong>: For each device path found, it extracts the parent directory path (<code>syspath</code>) by removing the trailing <code>/dev</code> part.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syspath=<span class="string">&quot;<span class="variable">$&#123;sysdevpath%/dev&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Getting the Device Name</strong>: The script uses <code>udevadm info</code> to query the device name corresponding to the syspath. This command provides various details about the device.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devname=<span class="string">&quot;<span class="subst">$(udevadm info -q name -p $syspath)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Filtering Out Non-USB Devices</strong>: The script checks if the device name starts with “bus&#x2F;“ and skips such devices since they’re not actual USB devices.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="string">&quot;<span class="variable">$devname</span>&quot;</span> == <span class="string">&quot;bus/&quot;</span>* ]]</span><br></pre></td></tr></table></figure></li><li><p><strong>Exporting Device Properties</strong>: It then uses <code>udevadm info</code> again to export all properties of the device into the current shell environment. This makes properties like <code>ID_SERIAL</code> available as shell variables.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(udevadm info -q property --export -p $syspath)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Checking Serial Number</strong>: The script verifies if <code>ID_SERIAL</code> is set. If it’s not, it continues to the next iteration. This ensures only devices with a serial number are considered.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -z <span class="string">&quot;<span class="variable">$ID_SERIAL</span>&quot;</span> ]]</span><br></pre></td></tr></table></figure></li><li><p><strong>Outputting the Device Information</strong>: Finally, the script prints the device’s path (<code>/dev/$devname</code>) along with its serial number (<code>$ID_SERIAL</code>).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/<span class="variable">$devname</span> - <span class="variable">$ID_SERIAL</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Running-the-Script"><a href="#Running-the-Script" class="headerlink" title="Running the Script"></a>Running the Script</h4><p>To use this script, save it to a file, for example <code>list_usb_devices.sh</code>, and give it execute permissions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x list_usb_devices.sh</span><br></pre></td></tr></table></figure><p>Run the script with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list_usb_devices.sh</span><br></pre></td></tr></table></figure><p>This will output a list of all connected USB devices and their serial numbers, like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1 - 1234567890</span><br><span class="line">/dev/sdb1 - 0987654321</span><br></pre></td></tr></table></figure><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This Bash script offers a streamlined approach to identify USB devices and their serial numbers on a Linux system. It leverages <code>udevadm</code> to gather detailed information about each device, ensuring you get accurate and relevant data. By automating this process, you can save time and reduce the complexity involved in managing USB devices.</p><p>Feel free to adapt and expand this script based on your specific requirements. Happy scripting!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bash Scripting </tag>
            
            <tag> Linux Automation </tag>
            
            <tag> USB Device Management </tag>
            
            <tag> udevadm </tag>
            
            <tag> System Administration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blogging for Dummies: Hexo GitHub Pages Edition</title>
      <link href="/2024/07/15/Blogging-for-Dummies-Hexo-GitHub-Pages-Edition/"/>
      <url>/2024/07/15/Blogging-for-Dummies-Hexo-GitHub-Pages-Edition/</url>
      
        <content type="html"><![CDATA[<h1 id="Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog"><a href="#Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog" class="headerlink" title="Step-by-Step Guide to Create a Hexo GitHub Pages Blog"></a>Step-by-Step Guide to Create a Hexo GitHub Pages Blog</h1><p>Hexo is a fast, simple, and powerful blogging framework. This guide will walk you through the process of creating a Hexo blog and deploying it to GitHub Pages.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before you begin, make sure you have the following installed:</p><ol><li><a href="https://nodejs.org/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ol><h2 id="Step-1-Install-Hexo"><a href="#Step-1-Install-Hexo" class="headerlink" title="Step 1: Install Hexo"></a>Step 1: Install Hexo</h2><p>Open your terminal and run the following command to install Hexo globally:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Step-2-Set-Up-Your-Blog"><a href="#Step-2-Set-Up-Your-Blog" class="headerlink" title="Step 2: Set Up Your Blog"></a>Step 2: Set Up Your Blog</h2><p>Create a new directory for your blog and navigate into it:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br></pre></td></tr></table></figure><p>Initialize a new Hexo project:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Step-3-Configure-Your-Blog"><a href="#Step-3-Configure-Your-Blog" class="headerlink" title="Step 3: Configure Your Blog"></a>Step 3: Configure Your Blog</h2><p>Open the <code>_config.yml</code> file in the root of your Hexo project with a text editor and configure your blog settings. Pay special attention to the <code>url</code>, <code>title</code>, and <code>author</code> settings.</p><h2 id="Step-4-Create-a-New-Post"><a href="#Step-4-Create-a-New-Post" class="headerlink" title="Step 4: Create a New Post"></a>Step 4: Create a New Post</h2><p>You can create a new blog post using the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure><p>This will create a new Markdown file in the <code>source/_posts</code> directory. Open this file and edit your post.</p><h2 id="Step-5-Generate-Static-Files"><a href="#Step-5-Generate-Static-Files" class="headerlink" title="Step 5: Generate Static Files"></a>Step 5: Generate Static Files</h2><p>Generate the static files for your blog:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>You can preview your blog locally by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Open <a href="http://localhost:4000/">http://localhost:4000</a> in your browser to see your blog.</p><h2 id="Step-6-Deploy-to-GitHub-Pages"><a href="#Step-6-Deploy-to-GitHub-Pages" class="headerlink" title="Step 6: Deploy to GitHub Pages"></a>Step 6: Deploy to GitHub Pages</h2><h3 id="Create-a-GitHub-Repository"><a href="#Create-a-GitHub-Repository" class="headerlink" title="Create a GitHub Repository"></a>Create a GitHub Repository</h3><ol><li>Go to <a href="https://github.com/">GitHub</a> and create a new repository named <code>username.github.io</code>, where <code>username</code> is your GitHub username.</li></ol><h3 id="Install-Hexo-Deployer"><a href="#Install-Hexo-Deployer" class="headerlink" title="Install Hexo Deployer"></a>Install Hexo Deployer</h3><p>Install the Hexo deployer for GitHub Pages:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="Configure-Deployment-Settings"><a href="#Configure-Deployment-Settings" class="headerlink" title="Configure Deployment Settings"></a>Configure Deployment Settings</h3><p>Open the <code>_config.yml</code> file again and add the following deployment settings at the bottom:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>Replace <code>username</code> with your GitHub username.</p><h3 id="Deploy-Your-Blog"><a href="#Deploy-Your-Blog" class="headerlink" title="Deploy Your Blog"></a>Deploy Your Blog</h3><p>Run the following command to deploy your blog to GitHub Pages:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Step-7-Visit-Your-Blog"><a href="#Step-7-Visit-Your-Blog" class="headerlink" title="Step 7: Visit Your Blog"></a>Step 7: Visit Your Blog</h2><p>Open your browser and navigate to <code>https://username.github.io</code> to see your live blog.</p><h2 id="Optional-Customize-Your-Theme"><a href="#Optional-Customize-Your-Theme" class="headerlink" title="Optional: Customize Your Theme"></a>Optional: Customize Your Theme</h2><p>Hexo supports a variety of themes. You can find themes in the <a href="https://hexo.io/themes/">Hexo Themes</a> gallery. To install a theme:</p><ol><li>Download the theme and unzip it into the <code>themes</code> directory of your Hexo project.</li><li>Update the <code>_config.yml</code> file to set the <code>theme</code> value to the name of your new theme.</li><li>Customize the theme settings as needed.</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You have successfully created and deployed a Hexo blog on GitHub Pages. Happy blogging!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> blogging </tag>
            
            <tag> Node.js </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
