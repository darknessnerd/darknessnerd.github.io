<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>FTT</title>
    <link>https://darknessnerd.github.io.git/</link>
    
    <atom:link href="https://darknessnerd.github.io.git/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 26 Aug 2024 13:00:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>The Smart Home Saga: How to Build Your Own Zigbee Gateway</title>
      <link>https://darknessnerd.github.io.git/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/</link>
      <guid>https://darknessnerd.github.io.git/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/</guid>
      <pubDate>Mon, 26 Aug 2024 11:30:26 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;h2 id=&quot;🧙‍♂️-The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway-🧙‍♀️&quot;&gt;&lt;a href=&quot;#🧙‍♂️-The-Smart-Home-Saga-How-to-Build-Your-Own</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><h2 id="🧙‍♂️-The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway-🧙‍♀️"><a href="#🧙‍♂️-The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway-🧙‍♀️" class="headerlink" title="🧙‍♂️ The Smart Home Saga: How to Build Your Own Zigbee Gateway 🧙‍♀️"></a>🧙‍♂️ <strong>The Smart Home Saga: How to Build Your Own Zigbee Gateway</strong> 🧙‍♀️</h2><p>(With Full Alexa and Home Assistant Integration) 🌟<br><em>By Technomancer</em>  </p><hr><h3 id="📜-The-Quest-Begins-Scope"><a href="#📜-The-Quest-Begins-Scope" class="headerlink" title="📜 The Quest Begins: Scope"></a>📜 <strong>The Quest Begins: Scope</strong></h3><p>Your mission, is to create a powerful Zigbee gateway that can coordinate all Zigbee devices in your enchanted castle.<br>At the end of this adventure, your gateway will seamlessly integrate with Alexa and Home Assistant, ready to control your Zigbee-powered devices. 🌐</p><hr><h3 id="🎯-Final-Result-🧙‍♂️-The-Wizard’s-Control-Panel"><a href="#🎯-Final-Result-🧙‍♂️-The-Wizard’s-Control-Panel" class="headerlink" title="🎯 **Final Result: 🧙‍♂️ The Wizard’s Control Panel **"></a>🎯 **Final Result: 🧙‍♂️ The Wizard’s Control Panel **</h3><p>Imagine walking into your hobbit hole and commanding your lights, curtains, and magic cauldrons with just a whisper to Alexa or a wave through Home Assistant! 🏠💡</p><p>With this Zigbee Gateway, you’ll be the ruler of all things smart in your enchanted realm. Here’s a sneak peek of what your domain could look like:</p><h4 id="🧚-Home-Assistant-Lights-Control"><a href="#🧚-Home-Assistant-Lights-Control" class="headerlink" title="🧚 Home Assistant Lights Control"></a>🧚 Home Assistant Lights Control</h4><p><em>A perfect blend of lights from the realms of IKEA and Philips!</em><br>  <img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/lights.gif" alt="lights"></p><h4 id="👑-Alexa-Lights-Control"><a href="#👑-Alexa-Lights-Control" class="headerlink" title="👑 Alexa Lights Control"></a>👑 Alexa Lights Control</h4><p><em>Magic at your fingertips—command lights with a single spell!</em><br><img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/alexa.png" alt="alexa app"></p><h3 id="🧰-Requirements-for-this-Magical-Journey"><a href="#🧰-Requirements-for-this-Magical-Journey" class="headerlink" title="🧰 Requirements for this Magical Journey"></a>🧰 <strong>Requirements for this Magical Journey</strong></h3><h4 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h4><ul><li><strong>Home Assistant</strong> (The Central Tower of Command) 🏰  </li><li><strong>Mosquitto</strong> (Your trusted Messenger Dragon 🐉)</li></ul><h4 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h4><ul><li><strong>SONOFF ZBDongle-E</strong> (Your Magical Staff)  </li><li>Various <strong>Zigbee Devices</strong> (The enchanted tools of your domain)</li></ul><hr><h3 id="🏰-Setting-Up-Home-Assistant"><a href="#🏰-Setting-Up-Home-Assistant" class="headerlink" title="🏰 Setting Up Home Assistant"></a>🏰 <strong>Setting Up Home Assistant</strong></h3><p>🧙‍♀️ Home Assistant is the enchanted crystal ball that keeps an eye on all your Zigbee devices. Follow <a href="https://darknessnerd.github.io/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/">this mystical guide</a> to summon it.</p><p>Once summoned, you’re halfway to becoming the <strong>Zigbee Oracle</strong> of your land! ⚡</p><h3 id="🐉-Mosquitto"><a href="#🐉-Mosquitto" class="headerlink" title="🐉 Mosquitto"></a>🐉 <strong>Mosquitto</strong></h3><p>Every wizard needs a messenger dragon, and <strong>Mosquitto</strong> is just that. It speaks the MQTT protocol, a language of whispers between your Zigbee devices and the realm. Use <a href="https://darknessnerd.github.io/2024/08/08/The-Day-I-Became-a-Weather-Wizard/#Docker-Compose-to-the-Rescue-%F0%9F%90%B3">this scroll</a> to summon Mosquitto. 🧑‍💻</p><hr><h3 id="🔮-The-SONOFF-ZBDongle-E-Your-Magical-Staff"><a href="#🔮-The-SONOFF-ZBDongle-E-Your-Magical-Staff" class="headerlink" title="🔮 The SONOFF ZBDongle-E: Your Magical Staff"></a>🔮 <strong>The SONOFF ZBDongle-E: Your Magical Staff</strong></h3><p>To become the master of your devices, you need a magical staff—the <strong>SONOFF ZBDongle-E</strong>.</p><p>You can enchant this staff using the <a href="https://darkxst.github.io/silabs-firmware-builder/">Silabs Firmware Flasher</a>.</p><h4 id="Download-the-enchantment-spell"><a href="#Download-the-enchantment-spell" class="headerlink" title="Download the enchantment spell:"></a>Download the enchantment spell:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncp-uart-hw-v7.4.2.0-zbdonglee-115200.gbl</span><br></pre></td></tr></table></figure><hr><h3 id="🔍-Identify-the-Serial-Port"><a href="#🔍-Identify-the-Serial-Port" class="headerlink" title="🔍 Identify the Serial Port"></a>🔍 <strong>Identify the Serial Port</strong></h3><p>Plug the device where you want to install and summon zigbe2mqtt.</p><p>Wizards often use bash scripts to identify magical ports. </p><p>Cast a spell from <a href="https://darknessnerd.github.io/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/">this tome</a> to know your port’s name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">muadib@arrakis:~$ ./ports.sh</span><br><span class="line">/dev/bus/usb/001/001 - Linux_5.10.0-9-amd64_xhci-hcd_xHCI_Host_Controller_0000:00:0d.0</span><br><span class="line">/dev/bus/usb/002/001 - Linux_5.10.0-9-amd64_xhci-hcd_xHCI_Host_Controller_0000:00:0d.0</span><br><span class="line">/dev/bus/usb/003/002 - ITEAD_SONOFF_Zigbee_3.0_USB_Dongle_Plus_V2_20240217153832</span><br><span class="line">/dev/ttyACM0 - ITEAD_SONOFF_Zigbee_3.0_USB_Dongle_Plus_V2_20240217153832</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="🧑‍💻-Installing-Zigbee2MQTT-The-Magic-Gateway"><a href="#🧑‍💻-Installing-Zigbee2MQTT-The-Magic-Gateway" class="headerlink" title="🧑‍💻 Installing Zigbee2MQTT: The Magic Gateway"></a>🧑‍💻 <strong>Installing Zigbee2MQTT: The Magic Gateway</strong></h3><p>First, open your wizard’s terminal and use Docker Compose to build your Zigbee gateway. </p><p>Here’s the incantation:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zigbee2mqtt:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">zigbee2mqtt</span>        <span class="comment"># Assigns a fixed name to the container for easier identification.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&quot;koenkk/zigbee2mqtt:1.39.1&quot;</span> <span class="comment"># Pulls the Zigbee2MQTT image version 1.39.1 from Docker Hub.</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/media/media4/home/zigbee2mqtt:/app/data</span>  <span class="comment"># Mounts the host directory for persistent data storage.</span></span><br><span class="line">  <span class="attr">devices:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/dev/ttyACM0:/dev/ttyACM0</span>      <span class="comment"># Maps the host&#x27;s Zigbee dongle (on /dev/ttyACM0) to the container for hardware access.</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">unless-stopped</span>            <span class="comment"># Ensures the container automatically restarts unless explicitly stopped.</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=Europe/Rome</span>                 <span class="comment"># Sets the timezone inside the container to Europe/Rome for proper logging and scheduling.</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span>                      <span class="comment"># Exposes port 8080 for the Zigbee2MQTT web frontend on the host machine.</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mosquitto</span>                      <span class="comment"># Indicates that the Zigbee2MQTT service should start only after the Mosquitto container is up.</span></span><br><span class="line"><span class="attr">mosquitto:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">mosquitto</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">eclipse-mosquitto:2.0.18</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1883</span><span class="string">:1883</span> <span class="comment">#default mqtt port</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/media/media4/home/mosquitto/mosquitto_conf:/mosquitto/config</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/media/media4/home/mosquitto/mosquitto_data:/mosquitto/data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/media/media4/home/mosquitto/mosquitto_log:/mosquitto/log</span></span><br></pre></td></tr></table></figure><h4 id="Technical-Breakdown"><a href="#Technical-Breakdown" class="headerlink" title="Technical Breakdown:"></a><strong>Technical Breakdown</strong>:</h4><ul><li><p><strong>container_name</strong>:</p><ul><li>This sets a static name for the Zigbee2MQTT container. This is particularly useful for referencing or troubleshooting because you won’t need to look up dynamically assigned container names.</li></ul></li><li><p><strong>image</strong>:</p><ul><li>Specifies the Docker image to use. In this case, <code>koenkk/zigbee2mqtt:1.39.1</code> is a popular open-source image for managing Zigbee devices via MQTT. Version 1.39.1 is used to ensure compatibility and stability.</li></ul></li><li><p><strong>volumes</strong>:</p><ul><li>Mounts a local directory (<code>/media/media4/home/zigbee2mqtt</code>) to the container’s <code>/app/data</code> directory. This is where Zigbee2MQTT stores configuration and device information, ensuring that data is persisted across container restarts.</li></ul></li><li><p><strong>devices</strong>:</p><ul><li>Maps the <strong>Zigbee dongle</strong> connected to <code>/dev/ttyACM0</code> on the host machine to the same path inside the container. This gives the container direct access to the physical Zigbee hardware needed to interact with Zigbee devices.</li><li>The dongle acts as a <strong>Zigbee coordinator</strong>, sending and receiving signals to and from Zigbee devices.</li></ul></li><li><p><strong>restart: unless-stopped</strong>:</p><ul><li>Instructs Docker to automatically restart the container if it crashes or stops unexpectedly, unless a manual stop command is issued. This ensures high availability.</li></ul></li><li><p><strong>environment</strong>:</p><ul><li>Sets the <code>TZ</code> environment variable to define the timezone (<code>Europe/Rome</code>) for the container. This is important for logging events with accurate local timestamps, especially for troubleshooting or automation.</li></ul></li><li><p><strong>ports</strong>:</p><ul><li>Exposes port <code>8080</code> on the host and maps it to port <code>8080</code> inside the container, enabling access to the Zigbee2MQTT web interface. This interface is useful for managing devices, viewing logs, and controlling Zigbee2MQTT operations.</li></ul></li><li><p><strong>depends_on</strong>:</p><ul><li>This directive ensures that the <code>mosquitto</code> service (MQTT broker) starts before Zigbee2MQTT, as Zigbee2MQTT relies on Mosquitto to send&#x2F;receive MQTT messages. However, it does not ensure the service is ready (health checks would be needed for that).</li></ul></li></ul><hr><p>We are now ready for the zigbee2,qtt configuration</p><h3 id="⚙️-Configure-Zigbee2MQTT"><a href="#⚙️-Configure-Zigbee2MQTT" class="headerlink" title="⚙️ Configure Zigbee2MQTT"></a>⚙️ <strong>Configure Zigbee2MQTT</strong></h3><p>Create a <strong><code>configuration.yaml</code></strong> file. </p><p>This spell controls the flow of magical MQTT energy between your Zigbee devices:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">homeassistant:</span></span><br><span class="line">  <span class="attr">legacy_entity_attributes:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">permit_join:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mqtt:</span></span><br><span class="line">  <span class="attr">base_topic:</span> <span class="string">zigbee2mqtt</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">mqtt://&lt;mosquitto_ip&gt;:1883</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&lt;mosquitto_user&gt;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;mosquitto_password&gt;</span></span><br><span class="line"><span class="attr">serial:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">/dev/ttyACM0</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">ember</span></span><br><span class="line"><span class="attr">frontend:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">ota:</span></span><br><span class="line">  <span class="attr">update_check_interval:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">disable_automatic_update_check:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>This configuration outlines how Zigbee2MQTT interacts with Home Assistant, Zigbee hardware, and MQTT messaging infrastructure.</p><p>The <strong>MQTT broker</strong> serves as the core communication hub between Zigbee2MQTT and other smart home applications (e.g., Home Assistant). Zigbee devices communicate via the <strong>Zigbee dongle</strong>, and their states or commands are translated into MQTT messages.</p><p>Here’s a detailed technical breakdown of the <strong>Zigbee2MQTT</strong> configuration block</p><h4 id="homeassistant-block"><a href="#homeassistant-block" class="headerlink" title="homeassistant block:"></a><strong>homeassistant</strong> block:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">homeassistant:</span></span><br><span class="line">  <span class="attr">legacy_entity_attributes:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>homeassistant</strong>: </p><ul><li>This section is specifically configured to allow the integration between Zigbee2MQTT and Home Assistant.</li></ul></li><li><p><strong>legacy_entity_attributes</strong>: </p><ul><li>This is set to <code>false</code> to <strong>disable the legacy format</strong> for entity attributes in Home Assistant. The older format included additional metadata in MQTT messages that is no longer required by modern versions of Home Assistant. This reduces unnecessary message payload sizes, leading to faster response times and better performance in Home Assistant.</li></ul></li></ul><hr><h4 id="permit-join"><a href="#permit-join" class="headerlink" title="permit_join:"></a><strong>permit_join</strong>:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permit_join:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><strong>permit_join</strong>:<ul><li>Controls whether <strong>new Zigbee devices</strong> can automatically join the network. When set to <code>false</code>, Zigbee2MQTT <strong>won’t allow new devices to join the network</strong> unless explicitly permitted via the UI or CLI. This adds security to prevent unauthorized devices from joining the network.</li><li>This setting can be temporarily changed when you want to pair a new device (e.g., from the Zigbee2MQTT UI).</li></ul></li></ul><hr><h4 id="mqtt-block"><a href="#mqtt-block" class="headerlink" title="mqtt block:"></a><strong>mqtt</strong> block:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mqtt:</span></span><br><span class="line">  <span class="attr">base_topic:</span> <span class="string">zigbee2mqtt</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">mqtt://&lt;mosquitto_ip&gt;:1883</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&lt;mosquitto_user&gt;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;mosquitto_password&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>mqtt</strong>:</p><ul><li>This block defines the <strong>MQTT connection settings</strong> used by Zigbee2MQTT to publish and subscribe to MQTT messages.</li></ul></li><li><p><strong>base_topic</strong>:</p><ul><li>This sets the <strong>base MQTT topic</strong> (<code>zigbee2mqtt</code>) under which all Zigbee devices will publish their data. For example, if a Zigbee light bulb is connected, its state (on&#x2F;off) will be published under the topic <code>zigbee2mqtt/&lt;device_name&gt;/state</code>.</li></ul></li><li><p><strong>server</strong>:</p><ul><li>Specifies the <strong>MQTT broker address</strong>, in this case, it’s using the <code>mosquitto</code> broker running at <code>mqtt://&lt;mosquitto_ip&gt;:1883</code>. Port <code>1883</code> is the default for MQTT.</li><li><code>&lt;mosquitto_ip&gt;</code> represents the IP address or hostname of the broker. This broker acts as the communication hub for Zigbee2MQTT and other devices or services, such as Home Assistant.</li></ul></li><li><p><strong>user&#x2F;password</strong>:</p><ul><li>These fields define the <strong>authentication credentials</strong> required to connect to the MQTT broker. If the broker requires authentication (which is recommended for security), the <code>&lt;mosquitto_user&gt;</code> and <code>&lt;mosquitto_password&gt;</code> fields should be filled with valid credentials.</li></ul></li></ul><hr><h4 id="serial-block"><a href="#serial-block" class="headerlink" title="serial block:"></a><strong>serial</strong> block:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">serial:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">/dev/ttyACM0</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">ember</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>serial</strong>:</p><ul><li>This section configures the <strong>serial communication</strong> settings between Zigbee2MQTT and the <strong>Zigbee coordinator hardware</strong> (e.g., a USB Zigbee dongle).</li></ul></li><li><p><strong>port</strong>:</p><ul><li>Specifies the <strong>serial port</strong> on the host machine where the Zigbee dongle is connected. In this case, the dongle is mapped to <code>/dev/ttyACM0</code>.</li><li>This serial port provides the <strong>physical connection</strong> between the Zigbee network and the host, allowing Zigbee2MQTT to send and receive signals via the coordinator.</li></ul></li><li><p><strong>adapter</strong>:</p><ul><li>Defines the <strong>type of Zigbee adapter</strong> used. Here, <code>ember</code> is specified, which refers to the <strong>EmberZNet</strong> chipset (commonly used in Sonoff Zigbee Dongle and other devices).</li><li>Other common adapters could be <code>zstack</code> (for Texas Instruments-based adapters) or <code>deconz</code> (for ConBee).</li></ul></li></ul><hr><h4 id="frontend-block"><a href="#frontend-block" class="headerlink" title="frontend block:"></a><strong>frontend</strong> block:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">frontend:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>frontend</strong>:</p><ul><li>Configures the settings for the Zigbee2MQTT <strong>web interface</strong> that allows users to manage and monitor Zigbee devices via a browser.</li></ul></li><li><p><strong>port</strong>:</p><ul><li>The <strong>web interface</strong> is accessible via port <code>8080</code>, allowing users to view logs, manage devices, and perform actions like pairing, resetting, or updating devices from a GUI. Users can access this interface through <code>http://&lt;host_ip&gt;:8080</code>.</li></ul></li></ul><hr><h4 id="ota-block-Over-the-Air-Updates"><a href="#ota-block-Over-the-Air-Updates" class="headerlink" title="ota block (Over-the-Air Updates):"></a><strong>ota</strong> block (Over-the-Air Updates):</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ota:</span></span><br><span class="line">  <span class="attr">update_check_interval:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>ota</strong>:</p><ul><li>This section controls the <strong>over-the-air (OTA) update</strong> behavior for supported Zigbee devices (such as IKEA or Philips Hue products).</li></ul></li><li><p><strong>update_check_interval</strong>:</p><ul><li>Specifies how often (in hours) Zigbee2MQTT checks for firmware updates for Zigbee devices. Here, it’s set to check every 10 hours.</li><li>OTA updates allow supported devices to get firmware upgrades without needing to physically interact with the device.</li></ul></li></ul><hr><h4 id="disable-automatic-update-check"><a href="#disable-automatic-update-check" class="headerlink" title="disable_automatic_update_check:"></a><strong>disable_automatic_update_check</strong>:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_automatic_update_check:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><strong>disable_automatic_update_check</strong>:<ul><li>Controls whether Zigbee2MQTT automatically checks for <strong>new software updates</strong> for itself. When set to <code>false</code>, the system will automatically look for updates to Zigbee2MQTT and notify users through the frontend.</li><li>Keeping this feature enabled ensures that you’re running the latest version of the software with bug fixes and new features, but you can disable it if you prefer manual updates.</li></ul></li></ul><hr><p>From our <strong>docker-compose</strong> folder, we can summon the containers and unleash our magical spells 🧙‍♂️✨ with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>If everything is in the right place and charged with enough mana 🔮, navigate to <strong>http:&#x2F;&#x2F;<host_ip>:8080</strong> in your browser. You should see the <strong>Zigbee2MQTT web UI</strong> appear, providing an easy way to monitor, manage, and control your Zigbee network through a mystical web interface! 🖥️⚡</p><hr><h3 id="🧹-Start-Pairing-Devices"><a href="#🧹-Start-Pairing-Devices" class="headerlink" title="🧹 Start Pairing Devices"></a>🧹 <strong>Start Pairing Devices</strong></h3><p>Head over to your wizard’s console at <code>https://&lt;host&gt;:8080</code> and enable <strong>permit join</strong> to start pairing your Zigbee devices! 🌈  </p><ul><li>Enable: Permit join on zigbee2mqtt<ul><li><img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/permit_join.png" alt="permit_join"></li></ul></li><li>Activate pairing mode on your device.  </li><li>Wait for the magic to happen. ✨</li></ul><p>Test your devices through the Zigbee2mqtt UI and bask in the power you now hold. 🎉</p><p><img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/zigbeecontrol.gif" alt="demo"></p><hr><h3 id="🤖-Configure-Home-Assistant-The-Heart-of-the-Realm"><a href="#🤖-Configure-Home-Assistant-The-Heart-of-the-Realm" class="headerlink" title="🤖 Configure Home Assistant: The Heart of the Realm"></a>🤖 <strong>Configure Home Assistant: The Heart of the Realm</strong></h3><p>Using the power of the <strong>MQTT</strong> integration in Home Assistant, you can control your Zigbee devices!</p><p>Follow the wizardry within Home Assistant to link it with Zigbee2MQTT. 🌐</p><p>From the Home Assistant UI, add a new MQTT integration 🔄:</p><p><img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/mqtt-1.png" alt="Add MQTT Integration"></p><p>Configure it with your MQTT broker details:</p><ul><li><strong>MQTT Host</strong> 🌐</li><li><strong>User</strong> 🧑‍💻</li><li><strong>Password</strong> 🔑</li></ul><p><img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/mqtt-2.png" alt="Configure MQTT"></p><p>Once configured, you’ll be able to see and control all your Zigbee devices directly from Home Assistant! 🌟<br>  <img src="/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/lights.gif" alt="demo"></p><hr><h3 id="🗣️-Alexa-Integration-Speak-and-the-Magic-Happens"><a href="#🗣️-Alexa-Integration-Speak-and-the-Magic-Happens" class="headerlink" title="🗣️ Alexa Integration: Speak, and the Magic Happens!"></a>🗣️ <strong>Alexa Integration: Speak, and the Magic Happens!</strong></h3><p>To communicate with Alexa, we’ll use the <strong>emulated_hue</strong> integration in Home Assistant. </p><p>Edit your <code>configuration.yaml</code> file to include your devices:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emulated_hue:</span></span><br><span class="line">  <span class="attr">listen_port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">expose_by_default:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">entities:</span></span><br><span class="line">    <span class="attr">light.camera:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;camera&quot;</span></span><br><span class="line">    <span class="attr">light.soggiorno:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;soggiorno&quot;</span></span><br><span class="line">    <span class="attr">light.bagno:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;bagno&quot;</span></span><br><span class="line">    <span class="attr">light.cucina:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;cucina&quot;</span></span><br></pre></td></tr></table></figure><p>Restart home-assistant</p><p>Alexa will now recognize your devices as enchanted lights and let you control them with your voice! 🗣️✨</p><hr><h3 id="🌟-Conclusion-You’ve-Mastered-the-Magic"><a href="#🌟-Conclusion-You’ve-Mastered-the-Magic" class="headerlink" title="🌟 Conclusion: You’ve Mastered the Magic"></a>🌟 <strong>Conclusion: You’ve Mastered the Magic</strong></h3><p>Congratulations! You’ve completed the quest and built a Zigbee Gateway that allows full integration with Alexa and Home Assistant. Your lights, and any Zigbee devices, will now bend to your will with just a word or a tap. You are now the true Technomancer! 🧙‍♂️🌍</p><hr><p>👑 May your smart home journey be filled with automation magic and convenience spells!</p>]]></content:encoded>
      
      
      
      
      <comments>https://darknessnerd.github.io.git/2024/08/26/The-Smart-Home-Saga-How-to-Build-Your-Own-Zigbee-Gateway/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The Day I Became a Weather Guru</title>
      <link>https://darknessnerd.github.io.git/2024/08/08/The-Day-I-Became-a-Weather-Wizard/</link>
      <guid>https://darknessnerd.github.io.git/2024/08/08/The-Day-I-Became-a-Weather-Wizard/</guid>
      <pubDate>Wed, 07 Aug 2024 22:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;The-Day-I-Became-a-Weather-Wizard-🌩️🧙‍♂️&quot;&gt;&lt;a href=&quot;#The-Day-I-Became-a-Weather-Wizard-🌩️🧙‍♂️&quot; class=&quot;headerlink&quot; title=&quot;The Day </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="The-Day-I-Became-a-Weather-Wizard-🌩️🧙‍♂️"><a href="#The-Day-I-Became-a-Weather-Wizard-🌩️🧙‍♂️" class="headerlink" title="The Day I Became a Weather Wizard 🌩️🧙‍♂️"></a>The Day I Became a Weather Wizard 🌩️🧙‍♂️</h1><p>Want to outsmart your local weatherman with cool gadgets and tech wizardry? 🧙‍♂️🪄 Grab your wizard hat and staff because I’m about to show you how I set up my own weather station using a <strong>Bresser Weather Center 5-in-1</strong>, a radio receiver, and a bunch of software tools that made me feel like a tech overlord. 🌦️📡💻👑</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>Our grand quest includes stopping the system irrigation when it rains and managing the thermostat based on the outside temperature and room temperatures. </p><p>In the realm of home automation, only your imagination sets the boundaries.</p><p>SPOILER: We’ll achieve all this by the end of the tutorial!</p><p><img src="/2024/08/08/The-Day-I-Became-a-Weather-Wizard/weather_screen.gif" alt="Real-time weather dashboard" title="Hass Home"></p><h2 id="High-Level-System-Overview"><a href="#High-Level-System-Overview" class="headerlink" title="High-Level System Overview"></a>High-Level System Overview</h2><p><img src="/2024/08/08/The-Day-I-Became-a-Weather-Wizard/archi.gif" alt="High level system overview" title="High level system overview"></p><h2 id="The-Hardware-🛠️"><a href="#The-Hardware-🛠️" class="headerlink" title="The Hardware 🛠️"></a>The Hardware 🛠️</h2><p><img src="/2024/08/08/The-Day-I-Became-a-Weather-Wizard/hardware.png" alt="hardware" title="hardware"></p><h3 id="The-Weather-Sensors"><a href="#The-Weather-Sensors" class="headerlink" title="The Weather Sensors"></a>The Weather Sensors</h3><p>First up, meet the star of the show, the <strong>Bresser Weather Center 5-in-1</strong>. It’s not just a fancy name; it’s a fancy gadget listed in the prestigious <a href="https://github.com/merbanan/rtl_433">rtl_433 GitHub repo</a>.</p><p>For more details, check it out <a href="https://www.bresser.de/en/Weather-Time/BRESSER-Wi-Fi-Colour-Weather-Station-with-5-in-1-Professional-Sensor.html">here</a>.</p><h3 id="Room-Sensors"><a href="#Room-Sensors" class="headerlink" title="Room Sensors"></a>Room Sensors</h3><p>We’re also using some room sensors to keep track of indoor temperatures and humidity: <a href="https://www.bresser.de/en/Weather-Time/Weather-Stations/BRESSER-Thermo-Hygrometer-Quadro-with-4-Independent-Measuring-Details.html">Bresser Thermo Hygrometer Quadro</a>.</p><h3 id="A-Radio-Receiver"><a href="#A-Radio-Receiver" class="headerlink" title="A Radio Receiver"></a>A Radio Receiver</h3><p>To catch those sweet 433 MHz or 868,3 MHz signals from the weather station, I dusted off an old radio receiver.<br>Think of it as bringing an old friend back to the spotlight.<br>(And by “old friend,” I mean a piece of tech I had lying around from a previous project.)</p><h3 id="Something-to-Run-the-Show"><a href="#Something-to-Run-the-Show" class="headerlink" title="Something to Run the Show"></a>Something to Run the Show</h3><p>To make all this magic happen, I needed something robust to run <strong>Home Assistant</strong>, <strong>Mosquitto</strong>, <strong>InfluxDB</strong>, and <strong>Grafana</strong>. You know, the usual suspects in the smart home scene.</p><h2 id="Setting-Up-the-Weather-Station"><a href="#Setting-Up-the-Weather-Station" class="headerlink" title="Setting Up the Weather Station"></a>Setting Up the Weather Station</h2><p>Mounting the weather station was like setting up a fancy birdhouse, except this one tells you when to carry an umbrella.</p><p>Once mounted, it started beaming data like a weather-obsessed R2-D2. Now, to catch those signals!</p><h2 id="Setting-Up-Home-Assistant"><a href="#Setting-Up-Home-Assistant" class="headerlink" title="Setting Up Home Assistant"></a>Setting Up Home Assistant</h2><p>Follow <a href="https://www.home-assistant.io/getting-started/">this guide</a> to get Home Assistant up and running. </p><p>Once you’ve got it set up, you’re halfway to becoming a weather oracle.</p><h2 id="A-Quick-Dive-into-RTL-SDR"><a href="#A-Quick-Dive-into-RTL-SDR" class="headerlink" title="A Quick Dive into RTL-SDR"></a>A Quick Dive into RTL-SDR</h2><p><strong>RTL-SDR</strong> is the superhero we need but don’t deserve. Originally created for decoding HDTV signals with the RTL2832U chipset from RealTek, it now serves a higher purpose: letting us eavesdrop on RF signals. From weather stations to tire pressure sensors, if it’s on 433 MHz, rtl_433 can hear it.</p><h2 id="Docker-Compose-to-the-Rescue-🐳"><a href="#Docker-Compose-to-the-Rescue-🐳" class="headerlink" title="Docker Compose to the Rescue 🐳"></a>Docker Compose to the Rescue 🐳</h2><h3 id="Home-Assistant-Mosquitto-and-PostgreSQL"><a href="#Home-Assistant-Mosquitto-and-PostgreSQL" class="headerlink" title="Home Assistant, Mosquitto, and PostgreSQL"></a>Home Assistant, Mosquitto, and PostgreSQL</h3><p>Here’s the secret sauce to run Home Assistant, Mosquitto, and PostgreSQL using Docker Compose:</p><p>This section defines each service (container) that makes up the application.</p><p>Here’s an explanation of your Docker Compose file with comments:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span>  <span class="comment"># Specifies the version of the Docker Compose file format</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># Defines the services (containers) that will be managed by Docker Compose</span></span><br><span class="line">  <span class="attr">homeassistant:</span>  <span class="comment"># Name of the service</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">homeassistant</span>  <span class="comment"># Name of the container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;ghcr.io/home-assistant/home-assistant:2024.7.4&quot;</span>  <span class="comment"># Docker image and version to use for this service</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/hass:/config</span>  <span class="comment"># Mounts the local directory for Home Assistant configuration</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span>  <span class="comment"># Synchronizes the container&#x27;s time with the host&#x27;s time (read-only)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="comment">#for monitor docker # Allows Home Assistant to monitor Docker (requires Docker socket access)</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>  <span class="comment"># Ensures the container restarts automatically unless it is explicitly stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span>  <span class="comment"># Shares the host&#x27;s network stack (allows access to the host network directly)</span></span><br><span class="line">    <span class="attr">depends_on:</span>  <span class="comment"># Specifies dependencies on other services</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mosquitto</span>  <span class="comment"># This service depends on the Mosquitto service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span>  <span class="comment"># This service depends on the Postgres service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb</span>  <span class="comment"># This service depends on the InfluxDB service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span>  <span class="comment"># Name of the service</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span>  <span class="comment"># Name of the container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:16.3-alpine3.20</span>  <span class="comment"># Docker image and version to use for this service</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>  <span class="comment"># Ensures the container restarts automatically unless it is explicitly stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span>  <span class="comment"># Maps the host port 5432 to the container port 5432 (default PostgreSQL port)</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/postgres:/var/lib/postgresql/data</span>  <span class="comment"># Mounts the local directory for PostgreSQL data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span>  <span class="comment"># Synchronizes the container&#x27;s time with the host&#x27;s time (read-only)</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># Environment variables for the PostgreSQL service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=homeassistant</span>  <span class="comment"># Name of the default database</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=hass</span>  <span class="comment"># PostgreSQL user</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=hass</span>  <span class="comment"># PostgreSQL user&#x27;s password</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mosquitto:</span>  <span class="comment"># Name of the service</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mosquitto</span>  <span class="comment"># Name of the container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eclipse-mosquitto:2.0.18</span>  <span class="comment"># Docker image and version to use for this service</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1883</span><span class="string">:1883</span> <span class="comment">#default mqtt port  # Maps the host port 1883 to the container port 1883 (default MQTT port)</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/mosquitto/mosquitto_conf:/mosquitto/config</span>  <span class="comment"># Mounts the local directory for Mosquitto configuration</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/mosquitto/mosquitto_data:/mosquitto/data</span>  <span class="comment"># Mounts the local directory for Mosquitto data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/mosquitto/mosquitto_log:/mosquitto/log</span>  <span class="comment"># Mounts the local directory for Mosquitto logs</span></span><br></pre></td></tr></table></figure><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points:"></a>Key Points:</h3><ul><li><strong>version</strong>: Specifies the version of the Docker Compose file format.</li><li><strong>services</strong>: Lists all the services to be managed by Docker Compose.<ul><li><strong>container_name</strong>: Sets a custom name for the container.</li><li><strong>image</strong>: Defines the Docker image to use for the container.</li><li><strong>volumes</strong>: Mounts directories from the host to the container for persistent storage and configuration.</li><li><strong>restart</strong>: Determines the restart policy for the container.</li><li><strong>network_mode</strong>: Configures the container to use the host’s network stack directly.</li><li><strong>depends_on</strong>: Specifies dependencies between services to control the order of startup.</li><li><strong>ports</strong>: Maps ports between the host and the container.</li><li><strong>environment</strong>: Sets environment variables for the container.</li></ul></li></ul><p>This configuration sets up a multi-container environment for running Home Assistant along with supporting services like PostgreSQL (database) and Mosquitto (MQTT broker). Each service has its own container with specified configurations, dependencies, and volume mappings to ensure persistent storage and appropriate networking.</p><h3 id="Configure-Mosquitto"><a href="#Configure-Mosquitto" class="headerlink" title="Configure Mosquitto"></a>Configure Mosquitto</h3><p>First, let’s set up Mosquitto:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /home/muadib/home/mosquitto/mosquitto_conf/mosquitto.conf</span><br></pre></td></tr></table></figure><p>Add the following lines:</p><p>This <code>ini</code> configuration file is likely for Mosquitto, an open-source MQTT (Message Queuing Telemetry Transport) broker. Each parameter controls a different aspect of the Mosquitto broker’s behavior. Here’s an explanation of each line, along with comments to describe their purpose:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">persistence true  </span><br><span class="line"><span class="comment"># Enables persistent storage of messages and subscriptions. </span></span><br><span class="line"><span class="comment"># This means that the broker will store messages and subscriptions on disk, </span></span><br><span class="line"><span class="comment"># so they are not lost if the broker is restarted.  persistence_location </span></span><br><span class="line">/mosquitto/data  </span><br><span class="line"><span class="comment"># Specifies the directory where the persistent data will be stored. </span></span><br><span class="line"><span class="comment"># In this case, the data will be stored in the /mosquitto/data directory.  </span></span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log  </span><br><span class="line"><span class="comment"># Sets the destination for log messages. </span></span><br><span class="line"><span class="comment"># &#x27;file&#x27; means the log messages will be written to a file. </span></span><br><span class="line"><span class="comment"># The path /mosquitto/log/mosquitto.log is the file where the log messages will be stored.  </span></span><br><span class="line">log_type information  </span><br><span class="line"><span class="comment"># Specifies the type of messages to be logged. </span></span><br><span class="line"><span class="comment"># &#x27;information&#x27; indicates that informational messages will be logged. </span></span><br><span class="line"><span class="comment"># Other options might include debug, notice, warning, error, etc.  </span></span><br><span class="line">listener 1883  </span><br><span class="line"><span class="comment"># Defines a network listener on port 1883. </span></span><br><span class="line"><span class="comment"># This is the default port for MQTT and is typically used for unencrypted MQTT connections.  </span></span><br><span class="line"><span class="comment">## Authentication ##  </span></span><br><span class="line"><span class="comment"># The following settings are related to authentication and access control.  </span></span><br><span class="line">allow_anonymous false  </span><br><span class="line"><span class="comment"># Disables anonymous access. </span></span><br><span class="line"><span class="comment"># Clients must provide a valid username and password to connect to the broker.  </span></span><br><span class="line">password_file /mosquitto/config/mosquitto.passwd </span><br><span class="line"><span class="comment"># Specifies the file that contains the usernames and passwords for authentication. </span></span><br><span class="line"><span class="comment"># The file /mosquitto/config/mosquitto.passwd should contain the credentials for users allowed to connect.</span></span><br></pre></td></tr></table></figure><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h4><ul><li><strong>persistence</strong>: Enables the retention of messages and subscriptions.</li><li><strong>persistence_location</strong>: Specifies the directory for storing persistent data.</li><li><strong>log_dest</strong>: Defines where log messages should be sent.</li><li><strong>log_type</strong>: Specifies the type of log messages.</li><li><strong>listener</strong>: Configures the network port the broker listens on for incoming connections.</li><li><strong>allow_anonymous</strong>: Controls whether anonymous connections are allowed.</li><li><strong>password_file</strong>: Points to the file containing user authentication credentials.</li></ul><p>These settings help configure the Mosquitto broker to store data persistently, log operational information, listen for incoming MQTT connections on the standard port, and enforce user authentication.</p><h4 id="Create-the-user-and-set-the-password"><a href="#Create-the-user-and-set-the-password" class="headerlink" title="Create the user and set the password:"></a>Create the user and set the password:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /home/muadib/home/mosquitto/mosquitto_conf/mosquitto.passwd</span><br></pre></td></tr></table></figure><p>Enter your desired username and password in the following format:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username:password</span><br></pre></td></tr></table></figure><p>Spin it up and run this command for the password file encryption:</p><h5 id="Command-1-docker-compose-up-d"><a href="#Command-1-docker-compose-up-d" class="headerlink" title="Command 1: docker-compose up -d"></a>Command 1: <code>docker-compose up -d</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>docker-compose</code>: This is the command to interact with Docker Compose, a tool for defining and running multi-container Docker applications.</li><li><code>up</code>: This subcommand tells Docker Compose to build, (re)create, start, and attach to containers for a service.</li><li><code>-d</code>: This flag stands for “detached mode,” meaning the containers will run in the background.</li></ul><h4 id="Command-2-docker-compose-exec-mosquitto-mosquitto-passwd-U-mosquitto-config-mosquitto-passwd"><a href="#Command-2-docker-compose-exec-mosquitto-mosquitto-passwd-U-mosquitto-config-mosquitto-passwd" class="headerlink" title="Command 2: docker-compose exec mosquitto mosquitto_passwd -U /mosquitto/config/mosquitto.passwd"></a>Command 2: <code>docker-compose exec mosquitto mosquitto_passwd -U /mosquitto/config/mosquitto.passwd</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> mosquitto mosquitto_passwd -U /mosquitto/config/mosquitto.passwd</span><br></pre></td></tr></table></figure><ul><li><code>docker-compose</code>: Again, this is the command to interact with Docker Compose.</li><li><code>exec</code>: This subcommand runs a command in a running service container.</li><li><code>mosquitto</code>: The name of the service&#x2F;container where the command should be executed.</li><li><code>mosquitto_passwd</code>: This is the command within the Mosquitto container used to manage Mosquitto password files.</li><li><code>-U</code>: This flag updates the password file, re-encrypting any plain text passwords.</li><li><code>/mosquitto/config/mosquitto.passwd</code>: The path to the Mosquitto password file within the container.</li></ul><h3 id="RTL-433-Docker-Compose-Setup"><a href="#RTL-433-Docker-Compose-Setup" class="headerlink" title="RTL_433 Docker Compose Setup"></a>RTL_433 Docker Compose Setup</h3><p>First, identify the USB device:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./ports.sh</span><br></pre></td></tr></table></figure><p>This will output something like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/bus/usb/001/001 - Linux_6.6.31+rpt-rpi-v8_dwc_otg_hcd_DWC_OTG_Controller_3f980000.usb </span><br><span class="line">/dev/bus/usb/001/005 - Realtek_RTL2838UHIDIR_00000001 </span><br><span class="line">/dev/swradio0 - Realtek_RTL2838UHIDIR_00000001</span><br></pre></td></tr></table></figure><p>Our device is <code>/dev/bus/usb/001/005</code>.</p><p>Now, create the Docker Compose file for RTL_433:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span> <span class="comment"># Specifies the version of the Docker Compose file format</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rtl-433:</span> <span class="comment"># Defines a service named rtl-433</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;hertzg/rtl_433:23.11-alpine&#x27;</span> <span class="comment"># Uses the hertzg/rtl_433 image, version 23.11-alpine</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">rtl-433</span> <span class="comment"># Sets the hostname of the container to rtl-433</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rtl-433</span> <span class="comment"># Names the container rtl-433</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span> <span class="comment"># Automatically restarts the container unless it is explicitly stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span> <span class="comment"># Uses the host&#x27;s network stack</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># Mounts host directories into the container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span> <span class="comment"># Mounts the host&#x27;s localtime file as read-only</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span> <span class="comment"># Mounts the host&#x27;s timezone file as read-only</span></span><br><span class="line">    <span class="attr">devices:</span> <span class="comment"># Grants the container access to the specified device</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/bus/usb/001/004</span> <span class="comment"># Path to the USB device on the host</span></span><br><span class="line">    <span class="attr">command:</span> <span class="comment"># Specifies the command to run in the container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-f868300000&#x27;</span> <span class="comment"># Frequency to listen on: 868.3 MHz</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-f433920000&#x27;</span> <span class="comment"># Frequency to listen on: 433.92 MHz</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-H160&#x27;</span> <span class="comment"># Protocol number 160 to be used by rtl_433</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-s1M&#x27;</span> <span class="comment"># Sample rate: 1 million samples per second</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Yautolevel&#x27;</span> <span class="comment"># Enable automatic gain adjustment</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Yminmax&#x27;</span> <span class="comment"># Display minimum and maximum signal level</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Ymagest&#x27;</span> <span class="comment"># Show magnitude estimation</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mlevel&#x27;</span> <span class="comment"># Display signal level</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mnoise&#x27;</span> <span class="comment"># Display noise level</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mtime:unix:usec:utc&#x27;</span> <span class="comment"># Display time in Unix format with microseconds and UTC timezone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mbits&#x27;</span> <span class="comment"># Display bit-level information</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mprotocol&#x27;</span> <span class="comment"># Display protocol information</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Ccustomary&#x27;</span> <span class="comment"># Use customary units for output</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Mstats:2:300&#x27;</span> <span class="comment"># Display statistics every 2 seconds, reset every 300 seconds</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-Fmqtt://192.168.1.71:1883,retain=1,user=rtl,pass=rtl&#x27;</span> <span class="comment"># Send data to the MQTT broker at 192.168.1.71 on port 1883 with retain flag set and specified user credentials</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This configuration sets up a Docker container for the rtl_433 software, which is used for receiving and decoding data from various radio transmitters, and sends the decoded data to an MQTT broker.</p><p>In my setup, I needed to scan two frequencies: one for room sensors and one for the weather station.</p><p>Fire it up:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>You’ll see:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rtl-<span class="number">433</span>    | rtl_433 version <span class="number">23.11</span> branch  at <span class="number">202311281352</span> inputs file rtl_tcp RTL-SDR with TLS </span><br><span class="line">rtl-<span class="number">433</span>    | MQTT: Publishing MQTT data to localhost port <span class="number">1883</span> </span><br><span class="line">rtl-<span class="number">433</span>    | Use <span class="string">&quot;-F log&quot;</span> <span class="keyword">if</span> you want any messages, warnings, and errors in the console. </span><br><span class="line">rtl-<span class="number">433</span>    | Detached kernel driver </span><br><span class="line">rtl-<span class="number">433</span>    | Found Rafael Micro R820T tuner </span><br><span class="line">rtl-<span class="number">433</span>    | Exact sample rate is: <span class="number">1000000.026491</span> Hz rtl-<span class="number">433</span>    | [R82XX] PLL not locked!</span><br></pre></td></tr></table></figure><h3 id="Home-Assistant-Add-on"><a href="#Home-Assistant-Add-on" class="headerlink" title="Home Assistant Add-on"></a>Home Assistant Add-on</h3><p>Extend the Docker Compose for RTL with this:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">rtl_433_autodiscovery:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">donotstart</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rtl_433_autodiscovery</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/pbkhrv/rtl_433-hass-addons-rtl_433_mqtt_autodiscovery-aarch64:next</span> <span class="comment"># On Raspberry Pi replace `amd64` with the appropriate architecture.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQTT_HOST=192.168.1.71</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQTT_USERNAME=rtl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQTT_PASSWORD=rtl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQTT_PORT=1883</span></span><br><span class="line"><span class="comment">#     - RTL_TOPIC=rtl_433/rtl-433/events</span></span><br><span class="line"><span class="comment">#     - DISCOVERY_PREFIX=homeassistant</span></span><br><span class="line"><span class="comment">#     - DISCOVERY_INTERVAL=30</span></span><br><span class="line"><span class="comment">#      - LOG_LEVEL=debug</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">OTHER_ARGS=--retain</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This service is required for the Home Assistant discovery feature. Use it on demand when you need to add a new device; otherwise, leave it stopped.</p><p>Now, let’s restart and check the Home Assistant devices list. You should see the weather station and the room sensors available.</p><h3 id="🌟-Enabling-MQTT-Integration-🌟"><a href="#🌟-Enabling-MQTT-Integration-🌟" class="headerlink" title="🌟 Enabling MQTT Integration 🌟"></a>🌟 Enabling MQTT Integration 🌟</h3><p>Almost there! 🌈 Just one last thing: turn on the MQTT integration in Home Assistant. 🚀 Zoom over to the integrations page, add MQTT, and watch as your weather station’s data flows in like a boss! 😎📈</p><p>And voilà! 🎉 You’ve leveled up to weather guru status, all while chuckling at the old tech you’ve repurposed. Now, go forth and predict the weather like a pro (or at least dazzle your neighbors)! 🧙‍♂️🌦️</p><hr><h2 id="🛠️-Create-Your-Home-Assistant-Dashboard-🛠️"><a href="#🛠️-Create-Your-Home-Assistant-Dashboard-🛠️" class="headerlink" title="🛠️ Create Your Home Assistant Dashboard 🛠️"></a>🛠️ Create Your Home Assistant Dashboard 🛠️</h2><p>Add a dashboard in Home Assistant to display all the juicy data from your weather station and the sensors in each room. 🏠🌡️💧</p><p><img src="/2024/08/08/The-Day-I-Became-a-Weather-Wizard/weather_screen.gif" alt="Weather dashboard" title="Weather dashboard"></p><hr><h2 id="🌀-InfluxDB-2-Configuration-🌀"><a href="#🌀-InfluxDB-2-Configuration-🌀" class="headerlink" title="🌀 InfluxDB 2 Configuration 🌀"></a>🌀 InfluxDB 2 Configuration 🌀</h2><p>Configure InfluxDB with your user, organization, and bucket. Follow the steps in the images below:</p><p><img src="/2024/08/08/The-Day-I-Became-a-Weather-Wizard/influxdb.png" alt="influxdb" title="influxdb"></p><p>Set up your InfluxDB user and organization name, and configure your bucket:</p><p>![influxdb - configuration](&#x2F;2024&#x2F;08&#x2F;08&#x2F;The-Day-I-Became-a-Weather-Wizard&#x2F;Pasted image 20240805223114.png “influxdb - configuration”)</p><p>Next, configure Home Assistant:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">muadib@zigbee:~ $ <span class="built_in">sudo</span> nano home/hass/configuration.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">influxdb:</span></span><br><span class="line">  <span class="attr">api_version:</span> <span class="number">2</span>  <span class="comment"># Specifies the API version used to communicate with InfluxDB.</span></span><br><span class="line">  <span class="attr">ssl:</span> <span class="literal">false</span>                 <span class="comment"># Determines if SSL (secure connection) is used. &#x27;false&#x27; means no SSL.</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span>            <span class="comment"># The hostname or IP address of the InfluxDB server.</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span>                 <span class="comment"># The port number on which InfluxDB is running.</span></span><br><span class="line">  <span class="attr">token:</span> <span class="type">!secret</span> <span class="string">influxdb_token</span> <span class="comment"># Authentication token for accessing InfluxDB, stored securely.</span></span><br><span class="line">  <span class="attr">organization:</span> <span class="string">trollnet</span>      <span class="comment"># The name of the organization in InfluxDB.</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">hass</span>               <span class="comment"># The name of the bucket (database) to store data in InfluxDB.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="attr">source:</span> <span class="string">ha</span>               <span class="comment"># Adds a tag named &#x27;source&#x27; with the value &#x27;ha&#x27; to all data points.</span></span><br><span class="line">  <span class="attr">tags_attributes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">friendly_name</span>          <span class="comment"># Includes the attribute &#x27;friendly_name&#x27; as a tag in data points.</span></span><br><span class="line">  <span class="attr">default_measurement:</span> <span class="string">units</span> <span class="comment"># Sets a default measurement name for data points when not specified.</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="attr">domains:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">person</span>               <span class="comment"># Specifies to include data from entities in the &#x27;person&#x27; domain.</span></span><br><span class="line">    <span class="attr">entity_globs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.speedtest*</span>    <span class="comment"># Includes entities that match the pattern &#x27;sensor.speedtest*&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.ram_use_pct*</span>  <span class="comment"># Includes entities that match the pattern &#x27;sensor.ram_use_pct*&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.cpu_load*</span>     <span class="comment"># Includes entities that match the pattern &#x27;sensor.cpu_load*&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.bresser*</span>      <span class="comment"># Includes entities that match the pattern &#x27;sensor.bresser*&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.nexus*</span>        <span class="comment"># Includes entities that match the pattern &#x27;sensor.nexus*&#x27;.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>restart home-assistant.</p><h2 id="📊-Grafana-Setup-📊"><a href="#📊-Grafana-Setup-📊" class="headerlink" title="📊 Grafana Setup 📊"></a>📊 Grafana Setup 📊</h2><h3 id="Bind-Mounts-Optional-🚀"><a href="#Bind-Mounts-Optional-🚀" class="headerlink" title="Bind Mounts (Optional) 🚀"></a>Bind Mounts (Optional) 🚀</h3><p>If you’re using directories on your host for Grafana’s database or configuration, start the container with a user who has permission to access and write to the directory you map. 🛠️</p><p>Find a user’s UID or GID in Unix:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">muadib@zigbee:~ $ <span class="built_in">id</span> -u muadib</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p>Create an <code>.env</code> file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UID=1000</span><br></pre></td></tr></table></figure><p>Ensure the volume mount folder exists and is owned by the desired user&#x2F;group:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">muadib@zigbee:~/hass-docker $ <span class="built_in">mkdir</span> ../home/grafana</span><br></pre></td></tr></table></figure><p>Configure Grafana and InfluxDB in <code>docker-compose.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">grafana:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">grafana/grafana:11.1.1</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">$&#123;UID&#125;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/home/muadib/home/grafana:/var/lib/grafana&quot;</span></span><br><span class="line">  <span class="attr">env_file:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">./.env</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">influxdb:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">influxdb:2.7.8-alpine</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8086</span><span class="string">:8086</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8089</span><span class="string">:8089/udp</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/home/muadib/home/influxdb:/var/lib/influxdb2&quot;</span></span><br></pre></td></tr></table></figure><p>Check the logs and restart a single container from the Docker Compose setup:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span> <span class="string">-t</span> <span class="number">1</span> <span class="string">grafana</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">build</span> <span class="string">grafana</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">--no-start</span> <span class="string">grafana</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">start</span> <span class="string">grafana</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span> <span class="string">-f</span> <span class="string">grafana</span></span><br></pre></td></tr></table></figure><hr><h2 id="🌐-Add-InfluxDB-to-Grafana-🌐"><a href="#🌐-Add-InfluxDB-to-Grafana-🌐" class="headerlink" title="🌐 Add InfluxDB to Grafana 🌐"></a>🌐 Add InfluxDB to Grafana 🌐</h2><p>Configure InfluxDB as a data source in Grafana:</p><ol><li>Open your web browser and go to Grafana’s root URL, usually <code>http://localhost:3000</code>. 🌐</li><li>On the sign-in page, use <code>admin</code> for both username and password.</li><li>Click <strong>Sign in</strong> and change your password when prompted. 🔒</li><li>Go to the data source section and find InfluxDB. 🌟</li></ol><p>Generate a new API token in InfluxDB for Grafana:</p><p>![influxdb - configuration](&#x2F;2024&#x2F;08&#x2F;08&#x2F;The-Day-I-Became-a-Weather-Wizard&#x2F;Pasted image 20240803214228.png “influxdb - configuration”)</p><hr><h3 id="📈-Install-the-Wind-Rose-Plugin-📈"><a href="#📈-Install-the-Wind-Rose-Plugin-📈" class="headerlink" title="📈 Install the Wind Rose Plugin 📈"></a>📈 Install the Wind Rose Plugin 📈</h3><ol><li>Clone the plugin repository:<br><code>git clone https://github.com/spectraphilic/grafana-windrose.git</code></li><li>Stop the Grafana-Docker container.</li><li>Manually copy the plugin to <code>/var/lib/grafana/plugins/grafana-windrose</code>.</li><li>Restart the Grafana-Docker container and check the plugin settings. 🎨</li></ol><p>Install ECharts for advanced visualizations:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install https://github.com/apache/echarts</span><br></pre></td></tr></table></figure><hr><h2 id="🎨-Crafting-the-Dashboard-🎨"><a href="#🎨-Crafting-the-Dashboard-🎨" class="headerlink" title="🎨 Crafting the Dashboard 🎨"></a>🎨 Crafting the Dashboard 🎨</h2><p>Create your dashboard and visualize the data:</p><p>![grafana dashboard](&#x2F;2024&#x2F;08&#x2F;08&#x2F;The-Day-I-Became-a-Weather-Wizard&#x2F;Pasted image 20240805225325.png “grafana dashboard”)</p><p>Set up a Grafana variable period as shown above:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GF_INSTALL_PLUGINS=volkovlabs-echarts-panel</span>  <span class="comment"># Specifies a Grafana plugin to install (echarts panel by Volkov Labs)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GF_DEFAULT_APP_MODE=development</span>              <span class="comment"># Sets the Grafana application mode to development for easier debugging</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-windrose</span>  <span class="comment"># Allows loading an unsigned plugin (windrose plugin for Grafana)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Design your dashboard like this:</p><p>![grafana dashboard ](&#x2F;2024&#x2F;08&#x2F;08&#x2F;The-Day-I-Became-a-Weather-Wizard&#x2F;Pasted image 20240807200447.png “grafana dashboard”)</p><hr><h2 id="🌬️-Wind-and-Speed-Direction-Chart-🌬️"><a href="#🌬️-Wind-and-Speed-Direction-Chart-🌬️" class="headerlink" title="🌬️ Wind and Speed Direction Chart 🌬️"></a>🌬️ Wind and Speed Direction Chart 🌬️</h2><p>Create the Flux query for wind speed and direction:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">speed = from(bucket: &quot;hass&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;entity_id&quot;] == &quot;bresser_5in1_254_wind_average&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; aggregateWindow(every: $&#123;period&#125;, fn: mean, createEmpty: false)</span><br><span class="line"></span><br><span class="line">  |&gt; pivot(rowKey:[&quot;_time&quot;], columnKey: [&quot;entity_id&quot;], valueColumn: &quot;_value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; rename(columns: &#123;&quot;bresser_5in1_254_wind_average&quot;: &quot;speed&quot;, &quot;_measurement&quot;: &quot;unit&quot;&#125;)</span><br><span class="line"></span><br><span class="line">  |&gt; keep(columns: [&quot;_time&quot;, &quot;speed&quot;, &quot;unit&quot;])</span><br><span class="line"></span><br><span class="line">direction = from(bucket: &quot;hass&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;entity_id&quot;] == &quot;bresser_5in1_254_wind_direction&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; aggregateWindow(every: $&#123;period&#125;, fn: mean, createEmpty: false)</span><br><span class="line"></span><br><span class="line">  |&gt; pivot(rowKey:[&quot;_time&quot;], columnKey: [&quot;entity_id&quot;], valueColumn: &quot;_value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; rename(columns: &#123;&quot;bresser_5in1_254_wind_direction&quot;: &quot;direction&quot;, &quot;_measurement&quot;: &quot;unit&quot;&#125;)</span><br><span class="line"></span><br><span class="line">  |&gt; keep(columns: [&quot;_time&quot;, &quot;direction&quot;, &quot;unit&quot;])</span><br><span class="line"></span><br><span class="line">join(</span><br><span class="line">  tables: &#123;speed, direction&#125;,</span><br><span class="line">  on: [&quot;_time&quot;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Create your business dashboard, use the code option for creating a dashboard:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">let wind;</span><br><span class="line"></span><br><span class="line">context.panel.data.series.map((s) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const time = s.fields.find((f) =&gt; f.name === &#x27;_time&#x27;).values;</span><br><span class="line"></span><br><span class="line">  const value = s.fields.find((f) =&gt; f.name === &#x27;speed&#x27;).values;</span><br><span class="line"></span><br><span class="line">  const rotate = s.fields.find((f) =&gt; f.name === &#x27;direction&#x27;).values;</span><br><span class="line"></span><br><span class="line">  wind = time.map((id, index) =&gt; &#123;</span><br><span class="line">    return &#123; symbolRotate: rotate[index], value: [time[index], value[index]] &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: &#x27;time&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    type: &#x27;value&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  visualMap: &#123;</span><br><span class="line">    orient: &#x27;horizontal&#x27;,</span><br><span class="line">    left: &#x27;center&#x27;,</span><br><span class="line">    min: 0,</span><br><span class="line">    max: 10,</span><br><span class="line">    text: [&#x27;High&#x27;, &#x27;Low&#x27;],</span><br><span class="line">    dimension: 1,</span><br><span class="line">    inRange: &#123;</span><br><span class="line">      color: [&#x27;#65B581&#x27;, &#x27;#FFCE34&#x27;, &#x27;#FD665F&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      data: wind,</span><br><span class="line">      type: &#x27;line&#x27;,</span><br><span class="line">      symbol: &#x27;path://M31 24.7343L21.7917 24.7343V0L9.20826 0L9.20826 24.7343H0L15.5 45L31 24.7343Z&#x27;,</span><br><span class="line">      symbolSize: 20,</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        width: 0.3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="🌪️-Windrose-Visualization-🌪️"><a href="#🌪️-Windrose-Visualization-🌪️" class="headerlink" title="🌪️ Windrose Visualization 🌪️"></a>🌪️ Windrose Visualization 🌪️</h2><p>Create two queries: one for wind speed and one for wind direction.</p><p>Speed Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from(bucket: &quot;hass&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;entity_id&quot;] == &quot;bresser_5in1_254_wind_average&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; aggregateWindow(every: $&#123;period&#125;, fn: mean, createEmpty: false)</span><br><span class="line"></span><br><span class="line">  |&gt; pivot(rowKey:[&quot;_time&quot;], columnKey: [&quot;entity_id&quot;], valueColumn: &quot;_value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; rename(columns: &#123;&quot;bresser_5in1_254_wind_average&quot;: &quot;speed&quot;, &quot;_measurement&quot;: &quot;unit&quot;&#125;)</span><br><span class="line"></span><br><span class="line">  |&gt; keep(columns: [&quot;_time&quot;, &quot;speed&quot;, &quot;unit&quot;])</span><br></pre></td></tr></table></figure><p>Direction Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from(bucket: &quot;hass&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;entity_id&quot;] == &quot;bresser_</span><br><span class="line"></span><br><span class="line">5in1_254_wind_direction&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; aggregateWindow(every: $&#123;period&#125;, fn: mean, createEmpty: false)</span><br><span class="line"></span><br><span class="line">  |&gt; pivot(rowKey:[&quot;_time&quot;], columnKey: [&quot;entity_id&quot;], valueColumn: &quot;_value&quot;)</span><br><span class="line"></span><br><span class="line">  |&gt; rename(columns: &#123;&quot;bresser_5in1_254_wind_direction&quot;: &quot;direction&quot;, &quot;_measurement&quot;: &quot;unit&quot;&#125;)</span><br><span class="line"></span><br><span class="line">  |&gt; keep(columns: [&quot;_time&quot;, &quot;direction&quot;, &quot;unit&quot;])</span><br></pre></td></tr></table></figure><p>Select the windrose chart type:</p><p>![grafana dashboard -windrose ](&#x2F;2024&#x2F;08&#x2F;08&#x2F;The-Day-I-Became-a-Weather-Wizard&#x2F;Pasted image 20240807201501.png “grafana dashboard -windrose”)</p><hr><h2 id="🏆-Conclusion-🏆"><a href="#🏆-Conclusion-🏆" class="headerlink" title="🏆 Conclusion 🏆"></a>🏆 Conclusion 🏆</h2><p>Armed with your <strong>Bresser Weather Center 5-in-1</strong>, a vintage radio receiver, and a sprinkle of software magic, you’ve created a setup that reads, interprets, and displays weather data like a true wizard. 🌟</p><p>Seeing real-time weather updates and having your home respond automatically is nothing short of thrilling. 🌦️ So, if you’re up for some weather wizardry, remember: with the right tools and a dash of patience, you too can conjure up some magic. ✨</p><p>Happy weather-watching! 🌈🔮</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Technology/">Technology</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Home-Automation/">Home Automation</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/IoT/">IoT</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Smart-Home/">Smart Home</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Weather-Station/">Weather Station</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Data-Visualization/">Data Visualization</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/MQTT/">MQTT</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Grafana/">Grafana</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/InfluxDB/">InfluxDB</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/DIY-Projects/">DIY Projects</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/08/08/The-Day-I-Became-a-Weather-Wizard/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Home Assistant: The Smart Home Saga Begins!</title>
      <link>https://darknessnerd.github.io.git/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/</guid>
      <pubDate>Sun, 28 Jul 2024 07:07:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Home-Assistant-The-Smart-Home-Saga-Begins&quot;&gt;&lt;a href=&quot;#Home-Assistant-The-Smart-Home-Saga-Begins&quot; class=&quot;headerlink&quot; title=&quot;Home-Assis</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Home-Assistant-The-Smart-Home-Saga-Begins"><a href="#Home-Assistant-The-Smart-Home-Saga-Begins" class="headerlink" title="Home-Assistant-The-Smart-Home-Saga-Begins"></a>Home-Assistant-The-Smart-Home-Saga-Begins</h1><h2 id="📝-Requirement-List"><a href="#📝-Requirement-List" class="headerlink" title="📝 Requirement List:"></a>📝 Requirement List:</h2><ol><li>🍓 <strong>Raspberry Pi</strong> (used 3B+ version for this tutorial)</li><li>💿 <strong>Raspbian OS</strong></li></ol><p>✨ <strong>Bonus Magic Tutorial</strong> ✨</p><p>🔮 If you want to know how to install Raspbian on Pi without a monitor, please follow this<a href="https://darknessnerd.github.io/2024/07/25/The-Invisible-Setup-Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor/"> <strong>magic tutorial – The Invisible Setup: Installing Raspbian on Raspberry Pi Without a Monitor</strong></a>! 🧙‍♂️</p><p>Enjoy your Pi adventure! 🥧</p><h1 id="Part-1-The-Magical-Installation-🧙‍♂️"><a href="#Part-1-The-Magical-Installation-🧙‍♂️" class="headerlink" title="Part 1: The Magical Installation 🧙‍♂️"></a>Part 1: The Magical Installation 🧙‍♂️</h1><p>Welcome to the world of smart homes! Ready to turn your home into a futuristic paradise? Let’s kick things off with Home Assistant and Postgres. </p><p>But first, a quick disclaimer: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If you start talking to your appliances, we’re not responsible <span class="keyword">for</span> any strange looks from your family members.</span><br></pre></td></tr></table></figure><h2 id="Step-1-Summon-Docker-on-Raspberry-Pi-🐳"><a href="#Step-1-Summon-Docker-on-Raspberry-Pi-🐳" class="headerlink" title="Step 1: Summon Docker on Raspberry Pi 🐳"></a>Step 1: Summon Docker on Raspberry Pi 🐳</h2><p>Imagine Docker as the magical suitcase from Mary Poppins. </p><p>It can fit everything you need in one place! </p><p>Here’s how to get Docker onto your Raspberry Pi:</p><ol><li>Open your terminal.</li><li>Run these magical incantations: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker muadib</span><br></pre></td></tr></table></figure></li></ol><p>Once Docker is installed, grab your Raspberry Pi and do a little celebratory dance. </p><p>You’ve just completed the first step!</p><h2 id="Step-2-Docker-Compose-The-Fellowship-Leader-🧙‍♂️"><a href="#Step-2-Docker-Compose-The-Fellowship-Leader-🧙‍♂️" class="headerlink" title="Step 2: Docker Compose - The Fellowship Leader 🧙‍♂️"></a>Step 2: Docker Compose - The Fellowship Leader 🧙‍♂️</h2><p>Docker Compose is like the director of an orchestra, making sure all your containers play in harmony. </p><p>Create a file named <code>docker-compose.yml</code> and add the following lines to it:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">homeassistant:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">homeassistant</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;ghcr.io/home-assistant/home-assistant:stable&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/hass:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mosquitto</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:16.3-alpine3.20</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/muadib/home/postgres:/var/lib/postgresql/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=&lt;db_name&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=&lt;user&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=&lt;password&gt;</span></span><br></pre></td></tr></table></figure><p>Save it, then run this in your terminal:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>Now, take a break. Grab a coffee, pet your cat, or just stare lovingly at your Raspberry Pi as it works its magic.</p><h2 id="Configuration-Explained-🧩"><a href="#Configuration-Explained-🧩" class="headerlink" title="Configuration Explained 🧩"></a>Configuration Explained 🧩</h2><p>Now that you’ve got Home Assistant and Postgres running, it’s time to configure them.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><p>This is where the real fun begins. Here’s a breakdown:</p><h3 id="Database-Configuration-📚"><a href="#Database-Configuration-📚" class="headerlink" title="Database Configuration 📚"></a>Database Configuration 📚</h3><p>In your <code>configuration.yaml</code> file, add:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">recorder:</span></span><br><span class="line">  <span class="attr">auto_repack:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">purge_keep_days:</span> <span class="number">7</span></span><br><span class="line">  <span class="attr">db_url:</span> <span class="type">!secret</span> <span class="string">psql_string</span></span><br><span class="line">  <span class="attr">db_retry_wait:</span> <span class="number">15</span> <span class="comment"># Wait 15 seconds before retrying</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="attr">domains:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">person</span></span><br><span class="line">    <span class="attr">entity_globs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.speedtest*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.ram_use_pct*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.cpu_load*</span></span><br><span class="line"><span class="attr">history:</span></span><br><span class="line"><span class="attr">logbook:</span></span><br></pre></td></tr></table></figure><h4 id="What’s-Happening-Here"><a href="#What’s-Happening-Here" class="headerlink" title="What’s Happening Here?"></a>What’s Happening Here?</h4><ul><li><strong>auto_repack:</strong> Optimizes the database automatically.</li><li><strong>purge_keep_days:</strong> Keeps only the last 7 days of data. Because who needs to remember what their thermostat was set to three months ago?</li><li><strong>db_url:</strong> This is where the magic happens. The connection string for your Postgres database (we’ll configure this in a bit).</li></ul><h3 id="Secrets-Configuration-🕵️‍♂️"><a href="#Secrets-Configuration-🕵️‍♂️" class="headerlink" title="Secrets Configuration 🕵️‍♂️"></a>Secrets Configuration 🕵️‍♂️</h3><p>To keep your secrets safe (because, let’s face it, we all have them), create a <code>secrets.yaml</code> file and add:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">psql_string:</span> <span class="string">&quot;postgresql://&lt;user&gt;:&lt;password&gt;@192.168.0.XXX/&lt;db_name&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>Replace <code>PASSWORD</code> and <code>192.168.0.XXX</code> with your actual password and IP address.</p><h2 id="Enable-Integrations-from-the-Home-Assistant-UI"><a href="#Enable-Integrations-from-the-Home-Assistant-UI" class="headerlink" title="Enable Integrations from the Home Assistant UI"></a>Enable Integrations from the Home Assistant UI</h2><p>Run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>Now, let’s make Home Assistant actually do something!</p><p><img src="/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/hass-ui.png" alt="homeassistant home" title="Hass Home"></p><p>Confgure it and enjoy your journey!!</p><p><img src="/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/hass-ui-config.png" alt="homeassistant home" title="Hass Home"></p><p>Enable some first sensors like:</p><ol><li><strong>Speedtest Integration:</strong> Navigate to the integrations page and enable the Speedtest integration. No more guessing if your internet is slow because of the weather or because your neighbor is downloading every season of their favorite show.</li></ol><p><img src="/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/speedtest.png" alt="homeassistant home" title="Hass Home"></p><ol start="2"><li><strong>System Monitoring:</strong> Enable system monitoring metrics by going to <code>config/integrations/integration/systemmonitor</code>. Pick the metrics you care about and add them to your dashboard.</li></ol><p><img src="/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/sensors-example.png" alt="homeassistant home" title="Hass Home"></p><p>Here’s a sneak peek at what your first dashboard might look like:</p><p><img src="/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/dashboard.png" alt="Dashboard System monitor" title="System monitor"></p><p>If you’re interested in learning how to create the dashboard or theme, please leave a comment on this blog.</p><h2 id="Coming-Up-Next"><a href="#Coming-Up-Next" class="headerlink" title="Coming Up Next"></a>Coming Up Next</h2><p>In the next tutorial, we’ll dive into capturing data from RTL weather stations and sensors for humidity and temperature. We’ll also explore frequencies like 400 MHz and 800 MHz. </p><p>So stay tuned, because your smart home journey is just beginning!</p><p>Until next time, happy automating! 🚀</p><hr><p>Feel free to share your progress and any questions in the comments below. </p><p>Let’s make our homes smarter together!</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Raspbian/">Raspbian</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/DIY/">DIY</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Docker/">Docker</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/HomeAutomation/">HomeAutomation</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/28/Home-Assistant-The-Smart-Home-Saga-Begins/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The Invisible Setup: Installing Raspbian on Raspberry Pi Without a Monitor</title>
      <link>https://darknessnerd.github.io.git/2024/07/25/The-Invisible-Setup-Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/25/The-Invisible-Setup-Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor/</guid>
      <pubDate>Thu, 25 Jul 2024 21:26:58 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor-A-Journey-of-Technological-Hijinks&quot;&gt;&lt;a href=&quot;#Installing-Raspbian-on-Raspberry</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor-A-Journey-of-Technological-Hijinks"><a href="#Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor-A-Journey-of-Technological-Hijinks" class="headerlink" title="Installing Raspbian on Raspberry Pi Without a Monitor: A Journey of Technological Hijinks"></a>Installing Raspbian on Raspberry Pi Without a Monitor: A Journey of Technological Hijinks</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Welcome, fellow tech enthusiasts, to the wild and wacky world of headless Raspberry Pi setup! Today, we’re diving into the delightful chaos of installing Raspbian on a Raspberry Pi without a monitor. Buckle up, because this is going to be a fun ride!</p><h2 id="What-You’ll-Need"><a href="#What-You’ll-Need" class="headerlink" title="What You’ll Need"></a>What You’ll Need</h2><p>Before we get started, here’s a quick checklist of what you’ll need:</p><ul><li>A Raspberry Pi (any model will do, but let’s go with the Raspberry Pi 4 for this adventure).</li><li>A microSD card (at least 8GB, but the bigger, the better).</li><li>A microSD card reader.</li><li>A computer with internet access.</li><li>A power supply for your Raspberry Pi.</li><li>An Ethernet cable (optional, but recommended for a smoother experience).</li></ul><h2 id="Step-1-Download-Raspbian"><a href="#Step-1-Download-Raspbian" class="headerlink" title="Step 1: Download Raspbian"></a>Step 1: Download Raspbian</h2><p>First things first, let’s get our hands on the latest Raspbian image. Head over to the <a href="https://www.raspberrypi.org/software/operating-systems/">official Raspberry Pi website</a> and download the Raspbian image. We recommend the “Raspberry Pi OS with desktop” version because, why not?</p><h2 id="Step-2-Flash-the-Image-to-the-SD-Card"><a href="#Step-2-Flash-the-Image-to-the-SD-Card" class="headerlink" title="Step 2: Flash the Image to the SD Card"></a>Step 2: Flash the Image to the SD Card</h2><p>Next, we need to flash the Raspbian image onto the microSD card. To do this, you can use a handy tool called <a href="https://www.balena.io/etcher/">balenaEtcher</a>.</p><ol><li>Download and install balenaEtcher.</li><li>Insert your microSD card into your card reader and connect it to your computer.</li><li>Open balenaEtcher, select the Raspbian image you downloaded, choose your microSD card, and hit “Flash!”.</li><li>Wait for the process to complete. This might take a few minutes, so feel free to grab a coffee or do a quick dance.</li></ol><h2 id="Step-3-Enable-SSH-and-Wi-Fi-The-Secret-Sauce"><a href="#Step-3-Enable-SSH-and-Wi-Fi-The-Secret-Sauce" class="headerlink" title="Step 3: Enable SSH and Wi-Fi (The Secret Sauce)"></a>Step 3: Enable SSH and Wi-Fi (The Secret Sauce)</h2><p>Here comes the magical part that makes this whole headless setup possible.</p><ol><li>Once the flashing is complete, remove and reinsert the microSD card into your computer.</li><li>Open the microSD card in your file explorer. You should see a bunch of files and folders.</li><li>Create a new empty file in the root of the microSD card and name it <code>ssh</code> (no file extension). This will enable SSH on your Raspberry Pi.</li><li>Next, create a file called <code>wpa_supplicant.conf</code> and add the following content to configure your Wi-Fi:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">country=US</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line"> ssid=&quot;YourNetworkName&quot;</span><br><span class="line"> psk=&quot;YourNetworkPassword&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Replace <code>YourNetworkName</code> and <code>YourNetworkPassword</code> with your actual Wi-Fi credentials.</p><h2 id="Step-4-Boot-Up-Your-Raspberry-Pi"><a href="#Step-4-Boot-Up-Your-Raspberry-Pi" class="headerlink" title="Step 4: Boot Up Your Raspberry Pi"></a>Step 4: Boot Up Your Raspberry Pi</h2><p>Now it’s time to bring your Raspberry Pi to life!</p><ol><li>Insert the microSD card into your Raspberry Pi.</li><li>Connect the power supply to your Raspberry Pi.</li><li>If you’re using an Ethernet cable, connect it now.</li></ol><p>Give it a minute or two to boot up and connect to your Wi-Fi network.</p><h2 id="Step-5-Find-Your-Raspberry-Pi’s-IP-Address"><a href="#Step-5-Find-Your-Raspberry-Pi’s-IP-Address" class="headerlink" title="Step 5: Find Your Raspberry Pi’s IP Address"></a>Step 5: Find Your Raspberry Pi’s IP Address</h2><p>To SSH into your Raspberry Pi, you need its IP address. There are a few ways to find it:</p><ul><li>Check your router’s device list for a new device.</li><li>Use a network scanning tool like <a href="https://angryip.org/">Angry IP Scanner</a>.</li></ul><h2 id="Step-6-SSH-into-Your-Raspberry-Pi"><a href="#Step-6-SSH-into-Your-Raspberry-Pi" class="headerlink" title="Step 6: SSH into Your Raspberry Pi"></a>Step 6: SSH into Your Raspberry Pi</h2><p>Once you have the IP address, open a terminal (or Command Prompt on Windows) and type the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@&lt;YourPiIPAddress&gt;</span><br></pre></td></tr></table></figure><p>Replace <code>&lt;YourPiIPAddress&gt;</code> with the actual IP address of your Raspberry Pi.</p><p>The default password for the <code>pi</code> user is <code>raspberry</code>. Once you’re in, change the password to something more secure using the <code>passwd</code> command.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>And there you have it! You’ve successfully installed Raspbian on your Raspberry Pi without using a monitor. Welcome to the headless club!</p><p>Feel free to explore and tinker with your newly set up Raspberry Pi. The possibilities are endless, and the fun has just begun!</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Raspbian/">Raspbian</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Raspberry-Pi/">Raspberry Pi</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Headless-Setup/">Headless Setup</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/DIY-Tech/">DIY Tech</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Fun-with-Pi/">Fun with Pi</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/25/The-Invisible-Setup-Installing-Raspbian-on-Raspberry-Pi-Without-a-Monitor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Container Wonderland: Running Open-WebUI and Ollama Smoothly</title>
      <link>https://darknessnerd.github.io.git/2024/07/18/Container-Wonderland-Running-Open-WebUI-and-Ollama-Smoothly/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/18/Container-Wonderland-Running-Open-WebUI-and-Ollama-Smoothly/</guid>
      <pubDate>Thu, 18 Jul 2024 21:29:22 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Running-Open-WebUI-with-Docker-A-Comprehensive-Guide&quot;&gt;&lt;a href=&quot;#Running-Open-WebUI-with-Docker-A-Comprehensive-Guide&quot; class=&quot;headerl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Running-Open-WebUI-with-Docker-A-Comprehensive-Guide"><a href="#Running-Open-WebUI-with-Docker-A-Comprehensive-Guide" class="headerlink" title="Running Open-WebUI with Docker: A Comprehensive Guide"></a>Running Open-WebUI with Docker: A Comprehensive Guide</h2><p>If you’re looking to deploy Open-WebUI and Ollama using Docker, you’re in the right place. Docker is a powerful tool for containerization that allows developers to package applications and their dependencies into a single unit, ensuring consistency across different environments. This guide will walk you through the process of running Open-WebUI and Ollama using Docker commands.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>Before we begin, make sure you have the following installed on your machine:</p><ol><li><strong>Docker</strong>: You can download and install Docker from <a href="https://www.docker.com/products/docker-desktop">here</a>.</li><li><strong>Basic Knowledge of Docker</strong>: Familiarity with Docker commands and concepts will be helpful.</li></ol><h3 id="Step-1-Running-Open-WebUI"><a href="#Step-1-Running-Open-WebUI" class="headerlink" title="Step 1: Running Open-WebUI"></a>Step 1: Running Open-WebUI</h3><p>First, let’s run the Open-WebUI container. The command below does the following:</p><ul><li><strong>Adds a host entry</strong> (<code>--add-host=host.docker.internal:host-gateway</code>): This maps the host IP address to <code>host.docker.internal</code> within the container.</li><li><strong>Maps Ports</strong> (<code>-p 8181:8080</code> and <code>-p 3000:8181</code>): The container’s port 8080 is mapped to host port 8181, and the container’s port 8181 is mapped to host port 3000.</li><li><strong>Mounts a Volume</strong> (<code>-v open-webui:/app/backend/data</code>): This creates a named volume <code>open-webui</code> and mounts it to <code>/app/backend/data</code> in the container, allowing data persistence.</li><li><strong>Sets Environment Variables</strong> (<code>-e OLLAMA_BASE_URL=http://localhost:11434</code> and <code>-e MAIN_LOG_LEVEL=debug</code>): Configures the base URL for Ollama and sets the logging level to debug.</li><li><strong>Names the Container</strong> (<code>--name open-webui</code>): Assigns the name <code>open-webui</code> to the container.</li><li><strong>Specifies the Image</strong> (<code>ghcr.io/open-webui/open-webui:main</code>): Uses the Open-WebUI image from the GitHub Container Registry.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --add-host=host.docker.internal:host-gateway -p 8181:8080 -v open-webui:/app/backend/data -p 3000:8181 -e OLLAMA_BASE_URL=http://localhost:11434 -e MAIN_LOG_LEVEL=debug --name open-webui ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><h3 id="Step-2-Running-Ollama"><a href="#Step-2-Running-Ollama" class="headerlink" title="Step 2: Running Ollama"></a>Step 2: Running Ollama</h3><p>Next, let’s run the Ollama container. This command does the following:</p><ul><li><strong>Runs the Container in Detached Mode</strong> (<code>-d</code>): The container runs in the background.</li><li><strong>Mounts a Volume</strong> (<code>-v ollama:/.ollama</code>): Creates a named volume <code>ollama</code> and mounts it to <code>/.ollama</code> in the container, ensuring data persistence.</li><li><strong>Maps Ports</strong> (<code>-p 11434:11434</code>): The container’s port 11434 is mapped to the same port on the host.</li><li><strong>Names the Container</strong> (<code>--name ollama</code>): Assigns the name <code>ollama</code> to the container.</li><li><strong>Specifies the Image</strong> (<code>ollama/ollama</code>): Uses the Ollama image.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v ollama:/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br></pre></td></tr></table></figure><h3 id="Verifying-the-Setup"><a href="#Verifying-the-Setup" class="headerlink" title="Verifying the Setup"></a>Verifying the Setup</h3><p>After running the above commands, verify that the containers are running smoothly:</p><ol><li><p><strong>List Running Containers</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>You should see both <code>open-webui</code> and <code>ollama</code> containers listed.</p></li><li><p><strong>Access Open-WebUI</strong>:<br>Open your browser and navigate to <code>http://localhost:8181</code> to access Open-WebUI.</p></li><li><p><strong>Check Logs</strong>:<br>To check the logs for troubleshooting, use:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs open-webui</span><br><span class="line">docker logs ollama</span><br></pre></td></tr></table></figure></li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>By following this guide, you have successfully set up and run Open-WebUI and Ollama using Docker. This setup allows you to leverage containerization for a consistent and portable development environment. Feel free to explore further customizations and configurations to suit your specific needs.</p><p>Happy Dockering!</p>]]></content:encoded>
      
      
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/18/Container-Wonderland-Running-Open-WebUI-and-Ollama-Smoothly/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Torrenting for the Lazy: Deluge + Docker = Minimal Effort</title>
      <link>https://darknessnerd.github.io.git/2024/07/17/Torrenting-for-the-Lazy-Deluge-Docker-Minimal-Effort/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/17/Torrenting-for-the-Lazy-Deluge-Docker-Minimal-Effort/</guid>
      <pubDate>Tue, 16 Jul 2024 22:59:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Managing torrents is much easier with Docker. This guide will show you how to set up Deluge, a popular BitTorrent client, using Docker Co</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Managing torrents is much easier with Docker. This guide will show you how to set up Deluge, a popular BitTorrent client, using Docker Compose. By the end, you’ll have a fully functional Deluge setup running in a Docker container, making torrent management simple and quick.</p><h2 id="What-is-Docker-Compose"><a href="#What-is-Docker-Compose" class="headerlink" title="What is Docker Compose?"></a>What is Docker Compose?</h2><p>Docker Compose is a tool that allows you to define and run multi-container Docker applications. With a single command, you can start all the services from your configuration file.</p><h2 id="Why-Choose-Deluge"><a href="#Why-Choose-Deluge" class="headerlink" title="Why Choose Deluge?"></a>Why Choose Deluge?</h2><p>Deluge is a powerful, lightweight BitTorrent client that works across various platforms. It has a rich collection of plugins and supports many configurations, making it a favorite among torrent users.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before starting, make sure you have:</p><ol><li>Docker installed.</li><li>Docker Compose installed.</li><li>A basic understanding of Docker and container concepts.</li></ol><h2 id="Docker-Compose-Configuration"><a href="#Docker-Compose-Configuration" class="headerlink" title="Docker Compose Configuration"></a>Docker Compose Configuration</h2><p>Here’s a basic Docker Compose configuration for Deluge:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">deluge:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/deluge:2.1.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">deluge</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Etc/UTC</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DELUGE_LOGLEVEL=error</span> <span class="comment"># optional</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media/media0/deluge/config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media/media0/deluge/downloads:/downloads</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8112</span><span class="string">:8112</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6881</span><span class="string">:6881</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6881</span><span class="string">:6881/udp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><h3 id="Configuration-Breakdown"><a href="#Configuration-Breakdown" class="headerlink" title="Configuration Breakdown"></a>Configuration Breakdown</h3><ul><li><code>version: &quot;2.1&quot;</code>: Specifies the Docker Compose file version.</li><li><code>services</code>: Lists the services to be deployed.</li><li><code>deluge</code>: The Deluge service.<ul><li><code>image</code>: The Docker image to use, here it’s <code>linuxserver/deluge:2.1.1</code>.</li><li><code>container_name</code>: Names the container for easier management.</li><li><code>environment</code>: Sets environment variables:<ul><li><code>PUID=1000</code> and <code>PGID=1000</code>: User and group IDs for permissions.</li><li><code>TZ=Etc/UTC</code>: Timezone.</li><li><code>DELUGE_LOGLEVEL=error</code>: Optional log level.</li></ul></li><li><code>volumes</code>: Maps host directories to container directories:<ul><li><code>/media/media0/deluge/config:/config</code>: For configuration files.</li><li><code>/media/media0/deluge/downloads:/downloads</code>: For downloaded files.</li></ul></li><li><code>ports</code>: Maps host ports to container ports:<ul><li><code>8112:8112</code>: Web UI port.</li><li><code>6881:6881</code> and <code>6881:6881/udp</code>: Torrent ports.</li></ul></li><li><code>restart: unless-stopped</code>: Automatically restarts the container unless stopped manually.</li></ul></li></ul><h2 id="Setting-Up-Deluge"><a href="#Setting-Up-Deluge" class="headerlink" title="Setting Up Deluge"></a>Setting Up Deluge</h2><ol><li><p><strong>Create the Directory Structure</strong>: Make sure the directories in the <code>volumes</code> section exist:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /media/media0/deluge/config</span><br><span class="line"><span class="built_in">mkdir</span> -p /media/media0/deluge/downloads</span><br></pre></td></tr></table></figure></li><li><p><strong>Run Docker Compose</strong>: Navigate to the directory with your <code>docker-compose.yml</code> file and run:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p> The <code>-d</code> flag runs the containers in detached mode.</p></li><li><p><strong>Access the Deluge Web UI</strong>: Open your web browser and go to <code>http://&lt;your-server-ip&gt;:8112</code>. You should see the Deluge web interface.</p></li><li><p><strong>Default Password</strong>: The default password is <code>deluge</code>. Change it in the settings for security.</p></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Setting up Deluge with Docker Compose is easy and efficient. This setup lets you manage your torrents effortlessly, providing a smooth experience. Docker simplifies the deployment process and keeps your system organized.</p><p>Feel free to customize the Docker Compose file to meet your specific needs. Happy torrenting!</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Docker/">Docker</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Docker-Compose/">Docker Compose</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Deluge/">Deluge</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/BitTorrent/">BitTorrent</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Torrent-Management/">Torrent Management</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/17/Torrenting-for-the-Lazy-Deluge-Docker-Minimal-Effort/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Serial Thrillers: Bash Script for USB Identification</title>
      <link>https://darknessnerd.github.io.git/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/</guid>
      <pubDate>Tue, 16 Jul 2024 22:02:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;If you need to identify USB devices connected to your Linux system, it can be a tedious process involving multiple commands and parsing a</description>
        
      
      
      
      <content:encoded><![CDATA[<p>If you need to identify USB devices connected to your Linux system, it can be a tedious process involving multiple commands and parsing all the lengthy outputs. </p><p>Automation can simplify this task significantly.</p><p>In this post, we’ll walk through a Bash script designed to list all USB devices connected to your system along with their serial numbers.</p><h4 id="The-Script"><a href="#The-Script" class="headerlink" title="The Script"></a>The Script</h4><p>Here’s the script in question:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sysdevpath <span class="keyword">in</span> $(find /sys/bus/usb/devices/usb*/ -name dev); <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">        syspath=<span class="string">&quot;<span class="variable">$&#123;sysdevpath%/dev&#125;</span>&quot;</span></span><br><span class="line">        devname=<span class="string">&quot;<span class="subst">$(udevadm info -q name -p $syspath)</span>&quot;</span></span><br><span class="line">        [[ <span class="string">&quot;<span class="variable">$devname</span>&quot;</span> == <span class="string">&quot;bus/&quot;</span>* ]]</span><br><span class="line">        <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(udevadm info -q property --export -p $syspath)</span>&quot;</span></span><br><span class="line">        [[ -z <span class="string">&quot;<span class="variable">$ID_SERIAL</span>&quot;</span> ]]</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/dev/<span class="variable">$devname</span> - <span class="variable">$ID_SERIAL</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="Understanding-the-Script"><a href="#Understanding-the-Script" class="headerlink" title="Understanding the Script"></a>Understanding the Script</h4><p>Let’s break down what this script does step by step:</p><ol><li><p><strong>Finding USB Devices</strong>: The script starts by finding all device paths under <code>/sys/bus/usb/devices/usb*/</code> that end with <code>dev</code>. This path contains directories and files representing USB devices and their attributes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sysdevpath <span class="keyword">in</span> $(find /sys/bus/usb/devices/usb*/ -name dev); <span class="keyword">do</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Extracting the Syspath</strong>: For each device path found, it extracts the parent directory path (<code>syspath</code>) by removing the trailing <code>/dev</code> part.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syspath=<span class="string">&quot;<span class="variable">$&#123;sysdevpath%/dev&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Getting the Device Name</strong>: The script uses <code>udevadm info</code> to query the device name corresponding to the syspath. This command provides details about the device.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devname=<span class="string">&quot;<span class="subst">$(udevadm info -q name -p $syspath)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Filtering Out Non-USB Devices</strong>: The script checks if the device name starts with “bus&#x2F;“ and skips such devices since they’re not actual USB devices.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="string">&quot;<span class="variable">$devname</span>&quot;</span> == <span class="string">&quot;bus/&quot;</span>* ]]</span><br></pre></td></tr></table></figure></li><li><p><strong>Exporting Device Properties</strong>: It then uses <code>udevadm info</code> again to export all properties of the device into the current shell environment. This makes properties like <code>ID_SERIAL</code> available as shell variables.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(udevadm info -q property --export -p $syspath)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Checking Serial Number</strong>: The script verifies if <code>ID_SERIAL</code> is set. If it’s not, it continues to the next iteration. This ensures only devices with a serial number are considered.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -z <span class="string">&quot;<span class="variable">$ID_SERIAL</span>&quot;</span> ]]</span><br></pre></td></tr></table></figure></li><li><p><strong>Outputting the Device Information</strong>: Finally, the script prints the device’s path (<code>/dev/$devname</code>) along with its serial number (<code>$ID_SERIAL</code>).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/<span class="variable">$devname</span> - <span class="variable">$ID_SERIAL</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Running-the-Script"><a href="#Running-the-Script" class="headerlink" title="Running the Script"></a>Running the Script</h4><p>To use this script, save it to a file, for example <code>list_usb_devices.sh</code>, and give it execute permissions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x list_usb_devices.sh</span><br></pre></td></tr></table></figure><p>Run the script with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list_usb_devices.sh</span><br></pre></td></tr></table></figure><p>This will output a list of all connected USB devices and their serial numbers, like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1 - 1234567890</span><br><span class="line">/dev/sdb1 - 0987654321</span><br></pre></td></tr></table></figure><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>This Bash script offers an approach to identify USB devices and their serial numbers on a Linux system. It’s based on <code>udevadm</code> to gather information about each device. By automating this process, you can save time and reduce the complexity involved in managing USB devices.</p><p>Feel free to adapt and expand this script based on your specific requirements. Happy scripting!</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Bash-Scripting/">Bash Scripting</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Linux-Automation/">Linux Automation</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/USB-Device-Management/">USB Device Management</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/udevadm/">udevadm</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/System-Administration/">System Administration</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/17/Serial-Thrillers-Bash-Script-for-USB-Identification/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Blogging for Dummies: Hexo GitHub Pages Edition</title>
      <link>https://darknessnerd.github.io.git/2024/07/15/Blogging-for-Dummies-Hexo-GitHub-Pages-Edition/</link>
      <guid>https://darknessnerd.github.io.git/2024/07/15/Blogging-for-Dummies-Hexo-GitHub-Pages-Edition/</guid>
      <pubDate>Mon, 15 Jul 2024 21:45:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog&quot;&gt;&lt;a href=&quot;#Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog&quot; class=&quot;heade</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog"><a href="#Step-by-Step-Guide-to-Create-a-Hexo-GitHub-Pages-Blog" class="headerlink" title="Step-by-Step Guide to Create a Hexo GitHub Pages Blog"></a>Step-by-Step Guide to Create a Hexo GitHub Pages Blog</h1><p>Hexo is a fast, simple, and powerful blogging framework. This guide will walk you through the process of creating a Hexo blog and deploying it to GitHub Pages.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before you begin, make sure you have the following installed:</p><ol><li><a href="https://nodejs.org/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ol><h2 id="Step-1-Install-Hexo"><a href="#Step-1-Install-Hexo" class="headerlink" title="Step 1: Install Hexo"></a>Step 1: Install Hexo</h2><p>Open your terminal and run the following command to install Hexo globally:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Step-2-Set-Up-Your-Blog"><a href="#Step-2-Set-Up-Your-Blog" class="headerlink" title="Step 2: Set Up Your Blog"></a>Step 2: Set Up Your Blog</h2><p>Create a new directory for your blog and navigate into it:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br></pre></td></tr></table></figure><p>Initialize a new Hexo project:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Step-3-Configure-Your-Blog"><a href="#Step-3-Configure-Your-Blog" class="headerlink" title="Step 3: Configure Your Blog"></a>Step 3: Configure Your Blog</h2><p>Open the <code>_config.yml</code> file in the root of your Hexo project with a text editor and configure your blog settings. Pay special attention to the <code>url</code>, <code>title</code>, and <code>author</code> settings.</p><h2 id="Step-4-Create-a-New-Post"><a href="#Step-4-Create-a-New-Post" class="headerlink" title="Step 4: Create a New Post"></a>Step 4: Create a New Post</h2><p>You can create a new blog post using the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure><p>This will create a new Markdown file in the <code>source/_posts</code> directory. Open this file and edit your post.</p><h2 id="Step-5-Generate-Static-Files"><a href="#Step-5-Generate-Static-Files" class="headerlink" title="Step 5: Generate Static Files"></a>Step 5: Generate Static Files</h2><p>Generate the static files for your blog:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>You can preview your blog locally by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Open <a href="http://localhost:4000/">http://localhost:4000</a> in your browser to see your blog.</p><h2 id="Step-6-Deploy-to-GitHub-Pages"><a href="#Step-6-Deploy-to-GitHub-Pages" class="headerlink" title="Step 6: Deploy to GitHub Pages"></a>Step 6: Deploy to GitHub Pages</h2><h3 id="Create-a-GitHub-Repository"><a href="#Create-a-GitHub-Repository" class="headerlink" title="Create a GitHub Repository"></a>Create a GitHub Repository</h3><ol><li>Go to <a href="https://github.com/">GitHub</a> and create a new repository named <code>username.github.io</code>, where <code>username</code> is your GitHub username.</li></ol><h3 id="Install-Hexo-Deployer"><a href="#Install-Hexo-Deployer" class="headerlink" title="Install Hexo Deployer"></a>Install Hexo Deployer</h3><p>Install the Hexo deployer for GitHub Pages:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="Configure-Deployment-Settings"><a href="#Configure-Deployment-Settings" class="headerlink" title="Configure Deployment Settings"></a>Configure Deployment Settings</h3><p>Open the <code>_config.yml</code> file again and add the following deployment settings at the bottom:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>Replace <code>username</code> with your GitHub username.</p><h3 id="Deploy-Your-Blog"><a href="#Deploy-Your-Blog" class="headerlink" title="Deploy Your Blog"></a>Deploy Your Blog</h3><p>Run the following command to deploy your blog to GitHub Pages:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Step-7-Visit-Your-Blog"><a href="#Step-7-Visit-Your-Blog" class="headerlink" title="Step 7: Visit Your Blog"></a>Step 7: Visit Your Blog</h2><p>Open your browser and navigate to <code>https://username.github.io</code> to see your live blog.</p><h2 id="Optional-Customize-Your-Theme"><a href="#Optional-Customize-Your-Theme" class="headerlink" title="Optional: Customize Your Theme"></a>Optional: Customize Your Theme</h2><p>Hexo supports a variety of themes. You can find themes in the <a href="https://hexo.io/themes/">Hexo Themes</a> gallery. To install a theme:</p><ol><li>Download the theme and unzip it into the <code>themes</code> directory of your Hexo project.</li><li>Update the <code>_config.yml</code> file to set the <code>theme</code> value to the name of your new theme.</li><li>Customize the theme settings as needed.</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You have successfully created and deployed a Hexo blog on GitHub Pages. Happy blogging!</p>]]></content:encoded>
      
      
      
      <category domain="https://darknessnerd.github.io.git/tags/Hexo/">Hexo</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/GitHub-Pages/">GitHub Pages</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/blogging/">blogging</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Node-js/">Node.js</category>
      
      <category domain="https://darknessnerd.github.io.git/tags/Git/">Git</category>
      
      
      <comments>https://darknessnerd.github.io.git/2024/07/15/Blogging-for-Dummies-Hexo-GitHub-Pages-Edition/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
